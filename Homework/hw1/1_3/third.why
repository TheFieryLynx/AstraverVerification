theory Second
    use import int.Int

    predicate section_point (x: int) (y1: int) (y2: int) (y3: int) = 
        y1 = y2 * x && (y3 = x && y2 <= x || y3 = x * x && y2 <= x * x)

    function u (x: int) (y1: int) (y2: int) (y3: int) : int =
        x * x * x - y2 - y3

    goal S_A:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 -> (section_point x x 1 x)

    goal A_A_T_completion:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 && (section_point x y1 y2 y3) && y2 < y3 -> (u x (y1 + x) (y2 + 1) y3) < (u x y1 y2 y3)

    goal A_A_T_fund:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 && (section_point x y1 y2 y3) -> (u x y1 y2 y3) >= 0

    goal A_A_T:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 && (section_point x y1 y2 y3) && y2 < y3 -> (section_point x (y1 + x) (y2 + 1) y3)

    goal A_A_FT_completion:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 && (section_point x y1 y2 y3) && y2 >= y3 && y3 = x -> (u x y1 y2 y1) < (u x y1 y2 y3)

    goal A_A_FT_fund:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 && (section_point x y1 y2 y3) -> (u x y1 y2 y3) >= 0

    goal A_A_FT:
        forall x: int, y1: int, y2: int, y3: int.
        x > 1 && (section_point x y1 y2 y3) && y2 >= y3 && y3 = x -> (section_point x y1 y2 y1)    
end