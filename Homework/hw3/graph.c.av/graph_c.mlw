
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero #"/home/andrew/astraver/hw3/final/graph.c" 84 81 188#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_5_8_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_21_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_21_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_21_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/andrew/astraver/hw3/final/graph.c" 86 22 104#
      (forall g_6_0 : (pointer __anonstruct_Graph_4).
       (forall f_0_0 : int.
        (forall t_0_0 : int.
         (forall m_1_0 : int.
          (forall n_4 : int.
           (((>=) m_1_0 n_4) ->
            ((=)
            (count g_6_0 f_0_0 t_0_0 m_1_0 n_4
            __anonstruct_Graph_4_edges_g_5_8_at_L
            __anonstruct_Edge_3_existent_0_edges_21_at_L
            __anonstruct_Edge_3_to_edges_21_at_L
            __anonstruct_Edge_3_from_edges_21_at_L) (0)))))))))))))
  
  predicate count_one_p (g_7 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_2 : int) (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_21_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_7 f_1 t_1 m_2 (Int.(+) m_2 (1))
     __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)
     (if
      (Bool.andb
      (Bool.andb
      ((<>)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_21_at_L
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L g_7) m_2))) (0))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_from_edges_21_at_L
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L g_7) m_2))) f_1))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_21_at_L
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L g_7) m_2))) t_1))
      then (1) else (0)))
  
  
  axiom Count_one #"/home/andrew/astraver/hw3/final/graph.c" 90 115 200#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_5_8_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_21_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_21_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_21_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/andrew/astraver/hw3/final/graph.c" 92 24 82#
      (forall g_8 : (pointer __anonstruct_Graph_4).
       (forall f_2_0 : int.
        (forall t_2_0 : int.
         (forall m_3 : int.
          (count_one_p g_8 f_2_0 t_2_0 m_3
          __anonstruct_Graph_4_edges_g_5_8_at_L
          __anonstruct_Edge_3_existent_0_edges_21_at_L
          __anonstruct_Edge_3_to_edges_21_at_L
          __anonstruct_Edge_3_from_edges_21_at_L))))))))))
  
  predicate count_split_p (g_9 : (pointer __anonstruct_Graph_4)) (f_3 : int)
  (t_3 : int) (m_4 : int) (n_5 : int) (k_5 : int)
  (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_21_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_9 f_3 t_3 m_4 k_5 __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)
     (Int.(+)
     (count g_9 f_3 t_3 m_4 n_5 __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)
     (count g_9 f_3 t_3 n_5 k_5 __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)))
  
  
  axiom Count_split #"/home/andrew/astraver/hw3/final/graph.c" 95 76 201#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_5_8_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_21_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_21_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_21_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/andrew/astraver/hw3/final/graph.c" 97 26 122#
      (forall g_10 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (forall n_6 : int.
           (forall k_6 : int.
            ((((<=) m_5 n_6) /\ ((<=) n_6 k_6)) ->
             (count_split_p g_10 f_4 t_4 m_5 n_6 k_6
             __anonstruct_Graph_4_edges_g_5_8_at_L
             __anonstruct_Edge_3_existent_0_edges_21_at_L
             __anonstruct_Edge_3_to_edges_21_at_L
             __anonstruct_Edge_3_from_edges_21_at_L)))))))))))))
  
end

theory Logic_all_count

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  function all_count (g_11 : (pointer __anonstruct_Graph_4)) (f_5 : int) (t_5
  : int) (__anonstruct_Graph_4_esize_g_11_11_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_11_11_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_69_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_69_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_69_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_11 f_5 t_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_11_11_at_L g_11))
     __anonstruct_Graph_4_edges_g_11_11_at_L
     __anonstruct_Edge_3_existent_0_edges_69_at_L
     __anonstruct_Edge_3_to_edges_69_at_L
     __anonstruct_Edge_3_from_edges_69_at_L)
  
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_15_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_15_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_15_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_16_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_16_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_16_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_39_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_39_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_39_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_40_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_39_at_L
       __anonstruct_Edge_3_to_edges_39_at_L
       __anonstruct_Edge_3_from_edges_39_at_L
       __anonstruct_Vertex_2_existent_vertices_40_at_L)))
  
  
end

theory Logic_graph_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate graph_valid (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_17_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_18_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_18_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_18_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_18_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_17_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"graph_c.jc" 59 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"graph_c.jc" 59 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"graph_c.jc" 61 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_18_at_L
      __anonstruct_Edge_3_to_edges_18_at_L
      __anonstruct_Edge_3_from_edges_18_at_L
      __anonstruct_Vertex_2_existent_vertices_17_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

theory Axiomatic_Graph

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  lemma L_painful_zero_count_after_ecnt
  #"/home/andrew/astraver/hw3/final/graph.c" 103 21 245#
  "expl:Lemma l_painful_zero_count_after_ecnt"  :
  (forall __anonstruct_Vertex_2_vertices_112_alloc_table_at_L : (alloc_table
   __anonstruct_Vertex_2).
   (forall __anonstruct_Edge_3_edges_111_alloc_table_at_L : (alloc_table
    __anonstruct_Edge_3).
    (forall __anonstruct_Graph_4_esize_g_12_24_at_L : (memory
     __anonstruct_Graph_4 Int32.t).
     (forall __anonstruct_Graph_4_ecnt_g_12_24_at_L : (memory
      __anonstruct_Graph_4 Int32.t).
      (forall __anonstruct_Graph_4_edges_g_12_24_at_L : (memory
       __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
       (forall __anonstruct_Graph_4_vsize_g_12_24_at_L : (memory
        __anonstruct_Graph_4 Int32.t).
        (forall __anonstruct_Graph_4_vertices_g_12_24_at_L : (memory
         __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)).
         (forall __anonstruct_Edge_3_existent_0_edges_111_at_L : (memory
          __anonstruct_Edge_3 Int32.t).
          (forall __anonstruct_Edge_3_to_edges_111_at_L : (memory
           __anonstruct_Edge_3 Int32.t).
           (forall __anonstruct_Edge_3_from_edges_111_at_L : (memory
            __anonstruct_Edge_3 Int32.t).
            (forall __anonstruct_Vertex_2_existent_vertices_112_at_L :
             (memory __anonstruct_Vertex_2 Int32.t).
             (#"/home/andrew/astraver/hw3/final/graph.c" 105 8 178#
             (forall g_12 : (pointer __anonstruct_Graph_4).
              (forall f_6 : int.
               (forall t_6 : int.
                (forall m_6 : int.
                 (forall n_7 : int.
                  ((graph_valid g_12
                   __anonstruct_Vertex_2_vertices_112_alloc_table_at_L
                   __anonstruct_Edge_3_edges_111_alloc_table_at_L
                   __anonstruct_Graph_4_esize_g_12_24_at_L
                   __anonstruct_Graph_4_ecnt_g_12_24_at_L
                   __anonstruct_Graph_4_edges_g_12_24_at_L
                   __anonstruct_Graph_4_vsize_g_12_24_at_L
                   __anonstruct_Graph_4_vertices_g_12_24_at_L
                   __anonstruct_Edge_3_existent_0_edges_111_at_L
                   __anonstruct_Edge_3_to_edges_111_at_L
                   __anonstruct_Edge_3_from_edges_111_at_L
                   __anonstruct_Vertex_2_existent_vertices_112_at_L) ->
                   ((((<=)
                     (Int32.to_int
                     (select __anonstruct_Graph_4_ecnt_g_12_24_at_L g_12))
                     (Int.(-) m_6 (1)))
                    /\
                    ((<) (Int.(-) m_6 (1))
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_12_24_at_L g_12))))
                    ->
                    ((=)
                    (count g_12 f_6 t_6 (Int.(-) m_6 (1)) m_6
                    __anonstruct_Graph_4_edges_g_12_24_at_L
                    __anonstruct_Edge_3_existent_0_edges_111_at_L
                    __anonstruct_Edge_3_to_edges_111_at_L
                    __anonstruct_Edge_3_from_edges_111_at_L) (0)))))))))))))))))))))
  
  lemma L_painful_learning_how_to_count
  #"/home/andrew/astraver/hw3/final/graph.c" 108 53 303#
  "expl:Lemma l_painful_learning_how_to_count"  :
  (forall __anonstruct_Graph_4_ecnt_g_13_25_at_L : (memory
   __anonstruct_Graph_4 Int32.t).
   (forall __anonstruct_Graph_4_edges_g_13_25_at_L : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_105_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_to_edges_105_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_from_edges_105_at_L : (memory
       __anonstruct_Edge_3 Int32.t).
       (#"/home/andrew/astraver/hw3/final/graph.c" 111 8 200#
       (forall g_13 : (pointer __anonstruct_Graph_4).
        (forall f_7 : int.
         (forall t_7 : int.
          (forall m_7 : int.
           (forall n_8 : int.
            ((((<=) (0) (Int.(-) m_7 (1))) /\
             ((<=) (Int.(-) m_7 (1))
             (Int32.to_int
             (select __anonstruct_Graph_4_ecnt_g_13_25_at_L g_13)))) ->
             ((=)
             (count g_13 f_7 t_7 (0) m_7
             __anonstruct_Graph_4_edges_g_13_25_at_L
             __anonstruct_Edge_3_existent_0_edges_105_at_L
             __anonstruct_Edge_3_to_edges_105_at_L
             __anonstruct_Edge_3_from_edges_105_at_L)
             (Int.(+)
             (count g_13 f_7 t_7 (0) (Int.(-) m_7 (1))
             __anonstruct_Graph_4_edges_g_13_25_at_L
             __anonstruct_Edge_3_existent_0_edges_105_at_L
             __anonstruct_Edge_3_to_edges_105_at_L
             __anonstruct_Edge_3_from_edges_105_at_L)
             (count g_13 f_7 t_7 (Int.(-) m_7 (1)) m_7
             __anonstruct_Graph_4_edges_g_13_25_at_L
             __anonstruct_Edge_3_existent_0_edges_105_at_L
             __anonstruct_Edge_3_to_edges_105_at_L
             __anonstruct_Edge_3_from_edges_105_at_L)))))))))))))))
  
  lemma L_count_one_p #"/home/andrew/astraver/hw3/final/graph.c" 114 73 475#
  "expl:Lemma l_count_one_p"  :
  (forall __anonstruct_Graph_4_edges_g_14_26_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_27_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_27_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_27_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/andrew/astraver/hw3/final/graph.c" 117 8 374#
      (forall g_14 : (pointer __anonstruct_Graph_4).
       (forall f_8 : int.
        (forall t_8 : int.
         (forall m_8 : int.
          (forall n_9 : int.
           ((count_one_p g_14 f_8 t_8 m_8
            __anonstruct_Graph_4_edges_g_14_26_at_L
            __anonstruct_Edge_3_existent_0_edges_27_at_L
            __anonstruct_Edge_3_to_edges_27_at_L
            __anonstruct_Edge_3_from_edges_27_at_L)
           /\
           ((=)
           (count g_14 f_8 t_8 m_8 (Int.(+) m_8 (1))
           __anonstruct_Graph_4_edges_g_14_26_at_L
           __anonstruct_Edge_3_existent_0_edges_27_at_L
           __anonstruct_Edge_3_to_edges_27_at_L
           __anonstruct_Edge_3_from_edges_27_at_L)
           (if
            (Bool.andb
            (Bool.andb
            (Int32.(<>)
            (select __anonstruct_Edge_3_existent_0_edges_27_at_L
            (shift (select __anonstruct_Graph_4_edges_g_14_26_at_L g_14) m_8))
            (#"graph_c.jc" 175 64 76# "expl:Integer cast" (Int32.of_int
            (0))))
            ((=)
            (Int32.to_int
            (select __anonstruct_Edge_3_from_edges_27_at_L
            (shift (select __anonstruct_Graph_4_edges_g_14_26_at_L g_14) m_8)))
            f_8))
            ((=)
            (Int32.to_int
            (select __anonstruct_Edge_3_to_edges_27_at_L
            (shift (select __anonstruct_Graph_4_edges_g_14_26_at_L g_14) m_8)))
            t_8)) then (1) else (0))))))))))))))
  
  lemma L_count_split_mini
  #"/home/andrew/astraver/hw3/final/graph.c" 126 18 258#
  "expl:Lemma l_count_split_mini"  :
  (forall __anonstruct_Graph_4_ecnt_g_15_28_at_L : (memory
   __anonstruct_Graph_4 Int32.t).
   (forall __anonstruct_Graph_4_edges_g_15_28_at_L : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_95_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_to_edges_95_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_from_edges_95_at_L : (memory
       __anonstruct_Edge_3 Int32.t).
       (#"/home/andrew/astraver/hw3/final/graph.c" 129 8 206#
       (forall g_15 : (pointer __anonstruct_Graph_4).
        (forall f_9 : int.
         (forall t_9 : int.
          (forall m_9 : int.
           (forall n_10 : int.
            ((((<=) (0) m_9) /\
             ((<) m_9
             (Int32.to_int
             (select __anonstruct_Graph_4_ecnt_g_15_28_at_L g_15)))) ->
             ((=)
             (count g_15 f_9 t_9 (0)
             (Int32.to_int
             (select __anonstruct_Graph_4_ecnt_g_15_28_at_L g_15))
             __anonstruct_Graph_4_edges_g_15_28_at_L
             __anonstruct_Edge_3_existent_0_edges_95_at_L
             __anonstruct_Edge_3_to_edges_95_at_L
             __anonstruct_Edge_3_from_edges_95_at_L)
             (Int.(+)
             (count g_15 f_9 t_9 (0) m_9
             __anonstruct_Graph_4_edges_g_15_28_at_L
             __anonstruct_Edge_3_existent_0_edges_95_at_L
             __anonstruct_Edge_3_to_edges_95_at_L
             __anonstruct_Edge_3_from_edges_95_at_L)
             (count g_15 f_9 t_9 m_9
             (Int32.to_int
             (select __anonstruct_Graph_4_ecnt_g_15_28_at_L g_15))
             __anonstruct_Graph_4_edges_g_15_28_at_L
             __anonstruct_Edge_3_existent_0_edges_95_at_L
             __anonstruct_Edge_3_to_edges_95_at_L
             __anonstruct_Edge_3_from_edges_95_at_L)))))))))))))))
  
  lemma L_count_split #"/home/andrew/astraver/hw3/final/graph.c" 132 76 538#
  "expl:Lemma l_count_split"  :
  (forall __anonstruct_Graph_4_esize_g_16_29_at_L : (memory
   __anonstruct_Graph_4 Int32.t).
   (forall __anonstruct_Graph_4_ecnt_g_16_29_at_L : (memory
    __anonstruct_Graph_4 Int32.t).
    (forall __anonstruct_Graph_4_edges_g_16_29_at_L : (memory
     __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
     (forall __anonstruct_Edge_3_existent_0_edges_79_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_to_edges_79_at_L : (memory
       __anonstruct_Edge_3 Int32.t).
       (forall __anonstruct_Edge_3_from_edges_79_at_L : (memory
        __anonstruct_Edge_3 Int32.t).
        (#"/home/andrew/astraver/hw3/final/graph.c" 135 8 434#
        (forall g_16 : (pointer __anonstruct_Graph_4).
         (forall f_10 : int.
          (forall t_10 : int.
           (forall m_10 : int.
            (forall n_11 : int.
             (((Int32.(<=) (#"graph_c.jc" 197 23 35# "expl:Integer cast"
               (Int32.of_int (0)))
               (select __anonstruct_Graph_4_ecnt_g_16_29_at_L g_16))
              /\
              (Int32.(<=)
              (select __anonstruct_Graph_4_ecnt_g_16_29_at_L g_16)
              (select __anonstruct_Graph_4_esize_g_16_29_at_L g_16))) ->
              (((=)
               (all_count g_16 f_10 t_10
               __anonstruct_Graph_4_esize_g_16_29_at_L
               __anonstruct_Graph_4_edges_g_16_29_at_L
               __anonstruct_Edge_3_existent_0_edges_79_at_L
               __anonstruct_Edge_3_to_edges_79_at_L
               __anonstruct_Edge_3_from_edges_79_at_L)
               (count g_16 f_10 t_10 (0)
               (Int32.to_int
               (select __anonstruct_Graph_4_esize_g_16_29_at_L g_16))
               __anonstruct_Graph_4_edges_g_16_29_at_L
               __anonstruct_Edge_3_existent_0_edges_79_at_L
               __anonstruct_Edge_3_to_edges_79_at_L
               __anonstruct_Edge_3_from_edges_79_at_L))
              /\
              (((=)
               (count g_16 f_10 t_10 (0)
               (Int32.to_int
               (select __anonstruct_Graph_4_esize_g_16_29_at_L g_16))
               __anonstruct_Graph_4_edges_g_16_29_at_L
               __anonstruct_Edge_3_existent_0_edges_79_at_L
               __anonstruct_Edge_3_to_edges_79_at_L
               __anonstruct_Edge_3_from_edges_79_at_L)
               (Int.(+)
               (count g_16 f_10 t_10 (0)
               (Int32.to_int
               (select __anonstruct_Graph_4_ecnt_g_16_29_at_L g_16))
               __anonstruct_Graph_4_edges_g_16_29_at_L
               __anonstruct_Edge_3_existent_0_edges_79_at_L
               __anonstruct_Edge_3_to_edges_79_at_L
               __anonstruct_Edge_3_from_edges_79_at_L)
               (count g_16 f_10 t_10
               (Int32.to_int
               (select __anonstruct_Graph_4_ecnt_g_16_29_at_L g_16))
               (Int32.to_int
               (select __anonstruct_Graph_4_esize_g_16_29_at_L g_16))
               __anonstruct_Graph_4_edges_g_16_29_at_L
               __anonstruct_Edge_3_existent_0_edges_79_at_L
               __anonstruct_Edge_3_to_edges_79_at_L
               __anonstruct_Edge_3_from_edges_79_at_L)))
              /\
              ((=)
              (all_count g_16 f_10 t_10
              __anonstruct_Graph_4_esize_g_16_29_at_L
              __anonstruct_Graph_4_edges_g_16_29_at_L
              __anonstruct_Edge_3_existent_0_edges_79_at_L
              __anonstruct_Edge_3_to_edges_79_at_L
              __anonstruct_Edge_3_from_edges_79_at_L)
              (Int.(+)
              (count g_16 f_10 t_10 (0)
              (Int32.to_int
              (select __anonstruct_Graph_4_ecnt_g_16_29_at_L g_16))
              __anonstruct_Graph_4_edges_g_16_29_at_L
              __anonstruct_Edge_3_existent_0_edges_79_at_L
              __anonstruct_Edge_3_to_edges_79_at_L
              __anonstruct_Edge_3_from_edges_79_at_L)
              (count g_16 f_10 t_10
              (Int32.to_int
              (select __anonstruct_Graph_4_ecnt_g_16_29_at_L g_16))
              (Int32.to_int
              (select __anonstruct_Graph_4_esize_g_16_29_at_L g_16))
              __anonstruct_Graph_4_edges_g_16_29_at_L
              __anonstruct_Edge_3_existent_0_edges_79_at_L
              __anonstruct_Edge_3_to_edges_79_at_L
              __anonstruct_Edge_3_from_edges_79_at_L))))))))))))))))))
  
end

theory Axiomatic_LF__Axiomatic__l_count_empty_tail

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  axiom LF__Lemma__l_count_empty_tail
  #"/home/andrew/astraver/hw3/final/graph.c" 154 9 58#
  "expl:Axiom LF__Lemma__l_count_empty_tail"
  "W:non_conservative_extension:N" :
  (forall __anonstruct_Vertex_2_vertices_117_alloc_table : (alloc_table
   __anonstruct_Vertex_2).
   (forall __anonstruct_Graph_4_g_17_30_alloc_table : (alloc_table
    __anonstruct_Graph_4).
    (forall __anonstruct_Edge_3_edges_116_alloc_table : (alloc_table
     __anonstruct_Edge_3).
     (forall __anonstruct_Graph_4_esize_g_17_30 : (memory
      __anonstruct_Graph_4 Int32.t).
      (forall __anonstruct_Graph_4_ecnt_g_17_30 : (memory
       __anonstruct_Graph_4 Int32.t).
       (forall __anonstruct_Graph_4_edges_g_17_30 : (memory
        __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
        (forall __anonstruct_Graph_4_vsize_g_17_30 : (memory
         __anonstruct_Graph_4 Int32.t).
         (forall __anonstruct_Graph_4_vertices_g_17_30 : (memory
          __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)).
          (forall __anonstruct_Edge_3_existent_0_edges_116 : (memory
           __anonstruct_Edge_3 Int32.t).
           (forall __anonstruct_Edge_3_to_edges_116 : (memory
            __anonstruct_Edge_3 Int32.t).
            (forall __anonstruct_Edge_3_from_edges_116 : (memory
             __anonstruct_Edge_3 Int32.t).
             (forall __anonstruct_Vertex_2_existent_vertices_117 : (memory
              __anonstruct_Vertex_2 Int32.t).
              (#"/home/andrew/astraver/hw3/final/graph.c" 154 9 58#
              (forall g_17 : (pointer __anonstruct_Graph_4).
               (forall f_11 : Int32.t.
                (forall t_11 : Int32.t.
                 (forall m_11 : Int32.t.
                  (((((<=)
                     (offset_min __anonstruct_Graph_4_g_17_30_alloc_table
                     g_17) (0))
                    /\
                    (((>=)
                     (offset_max __anonstruct_Graph_4_g_17_30_alloc_table
                     g_17) (0))
                    /\ ((=) true true)))
                   /\
                   ((graph_valid g_17
                    __anonstruct_Vertex_2_vertices_117_alloc_table
                    __anonstruct_Edge_3_edges_116_alloc_table
                    __anonstruct_Graph_4_esize_g_17_30
                    __anonstruct_Graph_4_ecnt_g_17_30
                    __anonstruct_Graph_4_edges_g_17_30
                    __anonstruct_Graph_4_vsize_g_17_30
                    __anonstruct_Graph_4_vertices_g_17_30
                    __anonstruct_Edge_3_existent_0_edges_116
                    __anonstruct_Edge_3_to_edges_116
                    __anonstruct_Edge_3_from_edges_116
                    __anonstruct_Vertex_2_existent_vertices_117)
                   /\
                   ((Int32.(<=)
                    (select __anonstruct_Graph_4_ecnt_g_17_30 g_17) m_11)
                   /\
                   (Int32.(<=) m_11
                   (select __anonstruct_Graph_4_esize_g_17_30 g_17))))) ->
                   ((=)
                   (count g_17 (Int32.to_int f_11) (Int32.to_int t_11)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_ecnt_g_17_30 g_17))
                   (Int32.to_int m_11) __anonstruct_Graph_4_edges_g_17_30
                   __anonstruct_Edge_3_existent_0_edges_116
                   __anonstruct_Edge_3_to_edges_116
                   __anonstruct_Edge_3_from_edges_116) (0))))))))))))))))))))
  
  predicate _LF__Predicate__l_count_empty_tail  = ((=) true true)
  
  
end

module Function_l_count_empty_tail_safe

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val l_count_empty_tail
  (g_1_0 : (pointer __anonstruct_Graph_4)) 
   (f_1_0 : Int32.t) 
    (t_1_0 : Int32.t) 
     (m_1 : Int32.t) 
      (__anonstruct_Vertex_2_vertices_122_alloc_table : (alloc_table
       __anonstruct_Vertex_2)) 
       (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
        __anonstruct_Graph_4)) 
        (__anonstruct_Edge_3_edges_121_alloc_table : (alloc_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_1_12 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_1_12 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_121 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_121 : (memory
                __anonstruct_Edge_3 Int32.t)) 
                (__anonstruct_Edge_3_from_edges_121 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_122 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"graph_c.jc" 220 12 352# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 148 17 26#
                     "expl:Requires clause"
                     (#"graph_c.jc" 220 12 352# "expl:Requires clause"
                     ((#"graph_c.jc" 220 12 352# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_1_12_alloc_table
                      g_1_0) (0)))
                     /\
                     (#"graph_c.jc" 220 12 352# "expl:Requires clause"
                     ((#"graph_c.jc" 220 12 352# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_1_12_alloc_table
                      g_1_0) (0)))
                     /\
                     (#"graph_c.jc" 220 12 352# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"graph_c.jc" 220 12 352# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 149 17 31#
                     "expl:Requires clause"
                     (graph_valid g_1_0
                     __anonstruct_Vertex_2_vertices_122_alloc_table
                     __anonstruct_Edge_3_edges_121_alloc_table
                     __anonstruct_Graph_4_esize_g_1_12
                     __anonstruct_Graph_4_ecnt_g_1_12
                     __anonstruct_Graph_4_edges_g_1_12
                     __anonstruct_Graph_4_vsize_g_1_12
                     __anonstruct_Graph_4_vertices_g_1_12
                     __anonstruct_Edge_3_existent_0_edges_121
                     __anonstruct_Edge_3_to_edges_121
                     __anonstruct_Edge_3_from_edges_121
                     __anonstruct_Vertex_2_existent_vertices_122))
                    /\
                    (#"graph_c.jc" 220 12 352# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 150 17 29#
                     "expl:Requires clause"
                     (Int32.(<=)
                     (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0) m_1))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 150 28 41#
                    "expl:Requires clause"
                    (Int32.(<=) m_1
                    (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))))))))))
                    }
                  ensures {
                    (#"/home/andrew/astraver/hw3/final/graph.c" 152 16 47#
                    "expl:Ensures clause"
                    ((=)
                    (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
                    (Int32.to_int m_1) __anonstruct_Graph_4_edges_g_1_12
                    __anonstruct_Edge_3_existent_0_edges_121
                    __anonstruct_Edge_3_to_edges_121
                    __anonstruct_Edge_3_from_edges_121) (0))) }
  
end

module Function_l_count_empty_tail_safety
#"/home/andrew/astraver/hw3/final/graph.c" 154 9 58#
"expl:l_count_empty_tail, safety"

  use import core.Zwf 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_l_count_empty_tail_safe 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let l_count_empty_tail #"/home/andrew/astraver/hw3/final/graph.c" 154 9 58#
  "expl:Function l_count_empty_tail, safety" =
  fun
   (g_1_0 : (pointer __anonstruct_Graph_4)) (f_1_0 : Int32.t) (t_1_0 :
   Int32.t) (m_1 : Int32.t) (__anonstruct_Edge_3_edges_121_alloc_table :
   (alloc_table __anonstruct_Edge_3))
   (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
   __anonstruct_Graph_4)) (__anonstruct_Vertex_2_vertices_122_alloc_table :
   (alloc_table __anonstruct_Vertex_2))
   (__anonstruct_Vertex_2_existent_vertices_122 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_121 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_121 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_121 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"graph_c.jc" 220 12 352#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 148 17 26#
    (#"graph_c.jc" 220 12 352#
    ((#"graph_c.jc" 220 12 352#
     ((<=) (offset_min __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\
    (#"graph_c.jc" 220 12 352#
    ((#"graph_c.jc" 220 12 352#
     ((>=) (offset_max __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\ (#"graph_c.jc" 220 12 352# ((=) true true)))))))
   /\
   (#"graph_c.jc" 220 12 352#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 149 17 31#
    (graph_valid g_1_0 __anonstruct_Vertex_2_vertices_122_alloc_table
    __anonstruct_Edge_3_edges_121_alloc_table
    __anonstruct_Graph_4_esize_g_1_12 __anonstruct_Graph_4_ecnt_g_1_12
    __anonstruct_Graph_4_edges_g_1_12 __anonstruct_Graph_4_vsize_g_1_12
    __anonstruct_Graph_4_vertices_g_1_12
    __anonstruct_Edge_3_existent_0_edges_121 __anonstruct_Edge_3_to_edges_121
    __anonstruct_Edge_3_from_edges_121
    __anonstruct_Vertex_2_existent_vertices_122))
   /\
   (#"graph_c.jc" 220 12 352#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 150 17 29#
    (Int32.(<=) (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0) m_1))
   /\
   (#"/home/andrew/astraver/hw3/final/graph.c" 150 28 41#
   (Int32.(<=) m_1 (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (if
    (#"/home/andrew/astraver/hw3/final/graph.c" 155 12 23#
    (Safe_int32.(>)  m_1
     (#"/home/andrew/astraver/hw3/final/graph.c" 155 16 23#
     "expl:Pointer dereference"
     (acc  __anonstruct_Graph_4_g_1_12_alloc_table
      __anonstruct_Graph_4_ecnt_g_1_12 g_1_0 )) ))
    then
     begin
     begin
     any unit
     requires { true } reads { f_1_0, g_1_0, m_1, t_1_0 }
     ensures {
       (#"/home/andrew/astraver/hw3/final/graph.c" 156 23 55#
       ((=)
       (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
       (Int.(-) (Int32.to_int m_1) (1)) (Int32.to_int m_1)
       __anonstruct_Graph_4_edges_g_1_12
       __anonstruct_Edge_3_existent_0_edges_121
       __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
       (0))) } ; () end;
      begin
      any unit
      requires { true } reads { f_1_0, g_1_0, m_1, t_1_0 }
      ensures {
        (#"/home/andrew/astraver/hw3/final/graph.c" 157 23 123#
        ((=)
        (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
        (Int32.to_int m_1) __anonstruct_Graph_4_edges_g_1_12
        __anonstruct_Edge_3_existent_0_edges_121
        __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
        (Int.(+)
        (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
        (Int.(-) (Int32.to_int m_1) (1)) __anonstruct_Graph_4_edges_g_1_12
        __anonstruct_Edge_3_existent_0_edges_121
        __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
        (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
        (Int.(-) (Int32.to_int m_1) (1)) (Int32.to_int m_1)
        __anonstruct_Graph_4_edges_g_1_12
        __anonstruct_Edge_3_existent_0_edges_121
        __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121))))
        } ; () end;
      (let _jessie_23 = g_1_0 in
      (let _jessie_22 = f_1_0 in
      (let _jessie_21 = t_1_0 in
      (let _jessie_20 =
      (Safe_int32.(-)  m_1
       (#"graph_c.jc" 272 61 73# "expl:Integer cast" (Safe_int32.of_int (1)))
       ) in
      (#"/home/andrew/astraver/hw3/final/graph.c" 158 12 48#
      "expl:Variant decreases"
      begin
      (check {
      (zwf_zero (#"/home/andrew/astraver/hw3/final/graph.c" 151 18 29#
      (Int.(-) (Int32.to_int _jessie_20)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 _jessie_23))))
      (#"/home/andrew/astraver/hw3/final/graph.c" 151 18 29#
      (Int.(-) (Int32.to_int m_1)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))))) });
       (#"/home/andrew/astraver/hw3/final/graph.c" 158 12 48#
       "expl:Precondition for l_count_empty_tail"
       (Function_l_count_empty_tail_safe.l_count_empty_tail  _jessie_23
        _jessie_22 _jessie_21 _jessie_20
        __anonstruct_Vertex_2_vertices_122_alloc_table
        __anonstruct_Graph_4_g_1_12_alloc_table
        __anonstruct_Edge_3_edges_121_alloc_table
        __anonstruct_Graph_4_esize_g_1_12 __anonstruct_Graph_4_ecnt_g_1_12
        __anonstruct_Graph_4_edges_g_1_12 __anonstruct_Graph_4_vsize_g_1_12
        __anonstruct_Graph_4_vertices_g_1_12
        __anonstruct_Edge_3_existent_0_edges_121
        __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121
        __anonstruct_Vertex_2_existent_vertices_122 )) end))))) end else ());
     (raise Return); (raise Return) end with Return -> () end
  
end

module Function_l_count_empty_tail

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val l_count_empty_tail
  (g_1_0 : (pointer __anonstruct_Graph_4)) 
   (f_1_0 : Int32.t) 
    (t_1_0 : Int32.t) 
     (m_1 : Int32.t) 
      (__anonstruct_Vertex_2_vertices_122_alloc_table : (alloc_table
       __anonstruct_Vertex_2)) 
       (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
        __anonstruct_Graph_4)) 
        (__anonstruct_Edge_3_edges_121_alloc_table : (alloc_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_1_12 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_1_12 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_121 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_121 : (memory
                __anonstruct_Edge_3 Int32.t)) 
                (__anonstruct_Edge_3_from_edges_121 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_122 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true }
                  ensures {
                    (#"/home/andrew/astraver/hw3/final/graph.c" 152 16 47#
                    "expl:Ensures clause"
                    ((=)
                    (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
                    (Int32.to_int m_1) __anonstruct_Graph_4_edges_g_1_12
                    __anonstruct_Edge_3_existent_0_edges_121
                    __anonstruct_Edge_3_to_edges_121
                    __anonstruct_Edge_3_from_edges_121) (0))) }
  
end

module Function_l_count_empty_tail_behaviors
#"/home/andrew/astraver/hw3/final/graph.c" 154 9 58#
"expl:l_count_empty_tail, behaviors"

  use Unsafe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_l_count_empty_tail 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let l_count_empty_tail_ensures_default
  #"/home/andrew/astraver/hw3/final/graph.c" 154 9 58#
  "expl:Function l_count_empty_tail, default behavior" =
  fun
   (g_1_0 : (pointer __anonstruct_Graph_4)) (f_1_0 : Int32.t) (t_1_0 :
   Int32.t) (m_1 : Int32.t) (__anonstruct_Edge_3_edges_121_alloc_table :
   (alloc_table __anonstruct_Edge_3))
   (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
   __anonstruct_Graph_4)) (__anonstruct_Vertex_2_vertices_122_alloc_table :
   (alloc_table __anonstruct_Vertex_2))
   (__anonstruct_Vertex_2_existent_vertices_122 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_121 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_121 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_121 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"graph_c.jc" 220 12 352#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 148 17 26#
    (#"graph_c.jc" 220 12 352#
    ((#"graph_c.jc" 220 12 352#
     ((<=) (offset_min __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\
    (#"graph_c.jc" 220 12 352#
    ((#"graph_c.jc" 220 12 352#
     ((>=) (offset_max __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\ (#"graph_c.jc" 220 12 352# ((=) true true)))))))
   /\
   (#"graph_c.jc" 220 12 352#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 149 17 31#
    (graph_valid g_1_0 __anonstruct_Vertex_2_vertices_122_alloc_table
    __anonstruct_Edge_3_edges_121_alloc_table
    __anonstruct_Graph_4_esize_g_1_12 __anonstruct_Graph_4_ecnt_g_1_12
    __anonstruct_Graph_4_edges_g_1_12 __anonstruct_Graph_4_vsize_g_1_12
    __anonstruct_Graph_4_vertices_g_1_12
    __anonstruct_Edge_3_existent_0_edges_121 __anonstruct_Edge_3_to_edges_121
    __anonstruct_Edge_3_from_edges_121
    __anonstruct_Vertex_2_existent_vertices_122))
   /\
   (#"graph_c.jc" 220 12 352#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 150 17 29#
    (Int32.(<=) (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0) m_1))
   /\
   (#"/home/andrew/astraver/hw3/final/graph.c" 150 28 41#
   (Int32.(<=) m_1 (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/andrew/astraver/hw3/final/graph.c" 152 16 47#
     "expl:Ensures clause"
     ((=)
     (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
     (Int32.to_int m_1) __anonstruct_Graph_4_edges_g_1_12
     __anonstruct_Edge_3_existent_0_edges_121
     __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
     (0)))) }  ->
   'Init:
   try
    begin
    (if
    (#"/home/andrew/astraver/hw3/final/graph.c" 155 12 23#
    (Unsafe_int32.(>)  m_1 (acc  __anonstruct_Graph_4_ecnt_g_1_12 g_1_0 ) ))
    then
     begin
     begin
     (assert {
     (#"/home/andrew/astraver/hw3/final/graph.c" 156 23 55#
     "expl:Assertion in line 156"
     ((=)
     (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
     (Int.(-) (Int32.to_int m_1) (1)) (Int32.to_int m_1)
     __anonstruct_Graph_4_edges_g_1_12
     __anonstruct_Edge_3_existent_0_edges_121
     __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
     (0))) }); () end;
      begin
      (assert {
      (#"/home/andrew/astraver/hw3/final/graph.c" 157 23 123#
      "expl:Assertion in line 157"
      ((=)
      (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
      (Int32.to_int m_1) __anonstruct_Graph_4_edges_g_1_12
      __anonstruct_Edge_3_existent_0_edges_121
      __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
      (Int.(+)
      (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
      (Int.(-) (Int32.to_int m_1) (1)) __anonstruct_Graph_4_edges_g_1_12
      __anonstruct_Edge_3_existent_0_edges_121
      __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121)
      (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
      (Int.(-) (Int32.to_int m_1) (1)) (Int32.to_int m_1)
      __anonstruct_Graph_4_edges_g_1_12
      __anonstruct_Edge_3_existent_0_edges_121
      __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121))))
      }); () end;
      (let _jessie_19 = g_1_0 in
      (let _jessie_18 = f_1_0 in
      (let _jessie_17 = t_1_0 in
      (let _jessie_16 =
      (Unsafe_int32.(-)  m_1
       (#"graph_c.jc" 272 61 73# "expl:Integer cast"
       (Unsafe_int32.of_int (1))) ) in
      (#"/home/andrew/astraver/hw3/final/graph.c" 158 12 48#
      "expl:Precondition for l_count_empty_tail"
      (Function_l_count_empty_tail.l_count_empty_tail  _jessie_19 _jessie_18
       _jessie_17 _jessie_16 __anonstruct_Vertex_2_vertices_122_alloc_table
       __anonstruct_Graph_4_g_1_12_alloc_table
       __anonstruct_Edge_3_edges_121_alloc_table
       __anonstruct_Graph_4_esize_g_1_12 __anonstruct_Graph_4_ecnt_g_1_12
       __anonstruct_Graph_4_edges_g_1_12 __anonstruct_Graph_4_vsize_g_1_12
       __anonstruct_Graph_4_vertices_g_1_12
       __anonstruct_Edge_3_existent_0_edges_121
       __anonstruct_Edge_3_to_edges_121 __anonstruct_Edge_3_from_edges_121
       __anonstruct_Vertex_2_existent_vertices_122 )))))) end else ());
     (raise Return); (raise Return) end with Return -> () end
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto__LAND_exc unit
  
  exception Goto__LAND_0_exc unit
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Goto_while_0_break_0_0_exc unit
  
  exception Goto_while_1_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_count_0_safety
#"/home/andrew/astraver/hw3/final/graph.c" 172 0 29# "expl:count, safety"

  use import core.Tag_table_type 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_LF__Axiomatic__l_count_empty_tail 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  let count_0 #"/home/andrew/astraver/hw3/final/graph.c" 172 0 29#
  "expl:Function count, safety" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0 : Int32.t) (t_0 : Int32.t)
   (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_32 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"graph_c.jc" 301 12 809#
   ((#"graph_c.jc" 301 12 809# _LF__Predicate__l_count_empty_tail) /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 164 13 22#
    (#"graph_c.jc" 301 12 809#
    ((#"graph_c.jc" 301 12 809#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\
    (#"graph_c.jc" 301 12 809#
    ((#"graph_c.jc" 301 12 809#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\ (#"graph_c.jc" 301 12 809# ((=) true true)))))))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 164 26 40#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_ecnt_g_0_13
    __anonstruct_Graph_4_edges_g_0_13 __anonstruct_Graph_4_vsize_g_0_13
    __anonstruct_Graph_4_vertices_g_0_13
    __anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
    __anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 165 13 28#
    (is_vertex g_0_0 (Int32.to_int f_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 166 13 28#
    (is_vertex g_0_0 (Int32.to_int t_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 167 13 36#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
    (Int32.to_int f_0)))) (0))))
   /\
   (#"/home/andrew/astraver/hw3/final/graph.c" 168 13 36#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_31
   (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
   (Int32.to_int t_0)))) (0)))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let c = ref (Safe_int32.any_  () ) in
    (let i = ref (Safe_int32.any_  () ) in
    begin
    (c :=
     (let _jessie_29 =
     (#"graph_c.jc" 323 20 32# "expl:Integer cast" (Safe_int32.of_int (0)))
     in
     begin
     (assert {
     (#"/home/andrew/astraver/hw3/final/graph.c" 174 8 9#
     "expl:Pointer index bounds" true) }); _jessie_29 end));
     try
      begin
      (i :=
       (let _jessie_32 =
       (#"graph_c.jc" 325 23 35# "expl:Integer cast" (Safe_int32.of_int (0)))
       in
       begin
       (assert {
       (#"/home/andrew/astraver/hw3/final/graph.c" 182 13 14#
       "expl:Pointer index bounds" true) }); _jessie_32 end));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_2:
       loop
       invariant { (#"graph_c.jc" 327 9 4366# true) }
         variant { (#"/home/andrew/astraver/hw3/final/graph.c" 180 21 32#
           (Int.(-)
           (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
           (Int32.to_int !i))) }
        begin
        any unit
        requires { true } reads { f_0, g_0_0, t_0 }
        ensures {
          ((#"/home/andrew/astraver/hw3/final/graph.c" 179 23 36#
           (#"/home/andrew/astraver/hw3/final/graph.c" 179 23 36#
           ((#"/home/andrew/astraver/hw3/final/graph.c" 179 24 30#
            (Int32.(<=) (#"graph_c.jc" 338 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !c))
           /\
           (#"/home/andrew/astraver/hw3/final/graph.c" 179 29 35#
           (Int32.(<=) !c !i)))))
          /\
          ((#"/home/andrew/astraver/hw3/final/graph.c" 178 23 48#
           ((=)
           (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
           (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_13
           __anonstruct_Edge_3_existent_0_edges_32
           __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)
           (Int32.to_int !c)))
          /\
          ((#"/home/andrew/astraver/hw3/final/graph.c" 177 23 35#
           (Int32.(<=) !i (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0)))
          /\
          (#"/home/andrew/astraver/hw3/final/graph.c" 176 23 29#
          (Int32.(<=) (#"graph_c.jc" 329 31 43# "expl:Integer cast"
          (Int32.of_int (0))) !i))))) } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/andrew/astraver/hw3/final/graph.c" 182 20 31#
          (Safe_int32.(<)  !i
           (#"/home/andrew/astraver/hw3/final/graph.c" 182 24 31#
           "expl:Pointer dereference"
           (acc  __anonstruct_Graph_4_g_0_13_alloc_table
            __anonstruct_Graph_4_ecnt_g_0_13 g_0_0 )) )) then ()
          else (raise (Goto_while_0_break_exc ())));
           try
            begin
            try
             begin
             (if
             (#"/home/andrew/astraver/hw3/final/graph.c" 183 12 32#
             (Safe_int32.(<>) 
              (#"/home/andrew/astraver/hw3/final/graph.c" 183 12 32#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
               __anonstruct_Edge_3_existent_0_edges_32
               (#"/home/andrew/astraver/hw3/final/graph.c" 183 12 20#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_0_13_alloc_table
                __anonstruct_Graph_4_edges_g_0_13 g_0_0 ))
               (Safe_int32.to_int  !i ) ))
              (#"graph_c.jc" 347 33 45# "expl:Integer cast"
              (Safe_int32.of_int (0))) ))
             then
              (if
              (#"/home/andrew/astraver/hw3/final/graph.c" 183 36 57#
              (Safe_int32.(=) 
               (#"/home/andrew/astraver/hw3/final/graph.c" 183 36 52#
               "expl:Pointer dereference"
               (acc_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
                __anonstruct_Edge_3_from_edges_32
                (#"/home/andrew/astraver/hw3/final/graph.c" 183 36 44#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_0_13_alloc_table
                 __anonstruct_Graph_4_edges_g_0_13 g_0_0 ))
                (Safe_int32.to_int  !i ) )) f_0 ))
              then
               (if
               (#"/home/andrew/astraver/hw3/final/graph.c" 183 61 80#
               (Safe_int32.(=) 
                (#"/home/andrew/astraver/hw3/final/graph.c" 183 61 75#
                "expl:Pointer dereference"
                (acc_offset_typesafe 
                 __anonstruct_Edge_3_edges_32_alloc_table
                 __anonstruct_Edge_3_to_edges_32
                 (#"/home/andrew/astraver/hw3/final/graph.c" 183 61 69#
                 "expl:Pointer dereference"
                 (acc  __anonstruct_Graph_4_g_0_13_alloc_table
                  __anonstruct_Graph_4_edges_g_0_13 g_0_0 ))
                 (Safe_int32.to_int  !i ) )) t_0 ))
               then
                begin
                (c :=
                 (let _jessie_30 =
                 (Safe_int32.(+)  !c
                  (#"graph_c.jc" 360 68 80# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) in
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 184 12 15#
                 "expl:Pointer index bounds" true) }); _jessie_30 end));
                 begin
                 any unit
                 requires { true } reads { f_0, g_0_0, t_0 }
                 ensures {
                   (#"/home/andrew/astraver/hw3/final/graph.c" 185 23 52#
                   ((=)
                   (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
                   (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
                   __anonstruct_Graph_4_edges_g_0_13
                   __anonstruct_Edge_3_existent_0_edges_32
                   __anonstruct_Edge_3_to_edges_32
                   __anonstruct_Edge_3_from_edges_32) (1))) } ; () end end
               else (raise (Goto__LAND_exc ())))
              else (raise (Goto__LAND_exc ())))
             else (raise (Goto__LAND_exc ())));
              (raise (Goto__LAND_0_exc ())); (raise (Goto__LAND_exc ())) end
             with Goto__LAND_exc _jessie_1 ->
             'U__LAND:
             'U__LAND:
             'U__LAND:
             'U__LAND:
             begin
             any unit
             requires { true } reads { f_0, g_0_0, t_0 }
             ensures {
               (#"/home/andrew/astraver/hw3/final/graph.c" 187 23 52#
               ((=)
               (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
               (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
               __anonstruct_Graph_4_edges_g_0_13
               __anonstruct_Edge_3_existent_0_edges_32
               __anonstruct_Edge_3_to_edges_32
               __anonstruct_Edge_3_from_edges_32) (0))) } ; () end end;
             (raise (Goto__LAND_0_exc ())) end with Goto__LAND_0_exc
            _jessie_2 -> 'U__LAND_0: 'U__LAND_0: () end;
           (i :=
            (let _jessie_31 =
            (Safe_int32.(+)  !i
             (#"graph_c.jc" 396 53 65# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) in
            begin
            (assert {
            (#"/home/andrew/astraver/hw3/final/graph.c" 182 33 36#
            "expl:Pointer index bounds" true) }); _jessie_31 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_5 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_3 ->
      'While_0_break: 'While_0_break: () end;
     begin
     any unit
     requires { true } reads { f_0, g_0_0, t_0 }
     ensures {
       (#"/home/andrew/astraver/hw3/final/graph.c" 190 15 46#
       ((=)
       (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
       (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
       __anonstruct_Graph_4_edges_g_0_13
       __anonstruct_Edge_3_existent_0_edges_32
       __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)
       (Int32.to_int !c))) } ; () end;
     begin
     any unit
     requires { true } reads { f_0, g_0_0, t_0 }
     ensures {
       (#"/home/andrew/astraver/hw3/final/graph.c" 191 15 53#
       ((=)
       (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
       (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_13 g_0_0))
       __anonstruct_Graph_4_edges_g_0_13
       __anonstruct_Edge_3_existent_0_edges_32
       __anonstruct_Edge_3_to_edges_32 __anonstruct_Edge_3_from_edges_32)
       (0))) } ; () end;
     begin
     (return :=
      (let _jessie_33 = !c in
      begin
      (assert { (#"graph_c.jc" 422 7 15# "expl:Pointer index bounds" true) });
       _jessie_33 end)); (raise Return) end end)); absurd  end with Return ->
    !return end)
  
end

module Function_count_0_behaviors
#"/home/andrew/astraver/hw3/final/graph.c" 172 0 29# "expl:count, behaviors"

  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_LF__Axiomatic__l_count_empty_tail 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let count_ensures_default
  #"/home/andrew/astraver/hw3/final/graph.c" 172 0 29#
  "expl:Function count, default behavior" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0 : Int32.t) (t_0 : Int32.t)
   (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_32 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_32 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"graph_c.jc" 301 12 809#
   ((#"graph_c.jc" 301 12 809# _LF__Predicate__l_count_empty_tail) /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 164 13 22#
    (#"graph_c.jc" 301 12 809#
    ((#"graph_c.jc" 301 12 809#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\
    (#"graph_c.jc" 301 12 809#
    ((#"graph_c.jc" 301 12 809#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\ (#"graph_c.jc" 301 12 809# ((=) true true)))))))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 164 26 40#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table
    __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_ecnt_g_0_13
    __anonstruct_Graph_4_edges_g_0_13 __anonstruct_Graph_4_vsize_g_0_13
    __anonstruct_Graph_4_vertices_g_0_13
    __anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
    __anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 165 13 28#
    (is_vertex g_0_0 (Int32.to_int f_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 166 13 28#
    (is_vertex g_0_0 (Int32.to_int t_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"graph_c.jc" 301 12 809#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 167 13 36#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
    (Int32.to_int f_0)))) (0))))
   /\
   (#"/home/andrew/astraver/hw3/final/graph.c" 168 13 36#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_31
   (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
   (Int32.to_int t_0)))) (0)))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/andrew/astraver/hw3/final/graph.c" 169 12 41#
     "expl:Ensures clause"
     ((=) (Int32.to_int result)
     (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
     __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
     __anonstruct_Edge_3_from_edges_32)))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let c = ref (Unsafe_int32.any_  () ) in
    (let i = ref (Unsafe_int32.any_  () ) in
    begin
    (c :=
     (#"graph_c.jc" 323 20 32# "expl:Integer cast" (Unsafe_int32.of_int (0))));
     try
      begin
      (i :=
       (#"graph_c.jc" 325 23 35# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_1:
       loop
       invariant
         { ((#"/home/andrew/astraver/hw3/final/graph.c" 176 23 29#
            (Int32.(<=) (#"graph_c.jc" 329 31 43# "expl:Integer cast"
            (Int32.of_int (0))) !i))
           &&
           ((#"/home/andrew/astraver/hw3/final/graph.c" 177 23 35#
            (Int32.(<=) !i (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0)))
           &&
           ((#"/home/andrew/astraver/hw3/final/graph.c" 178 23 48#
            ((=)
            (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
            (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_13
            __anonstruct_Edge_3_existent_0_edges_32
            __anonstruct_Edge_3_to_edges_32
            __anonstruct_Edge_3_from_edges_32) (Int32.to_int !c)))
           &&
           (#"/home/andrew/astraver/hw3/final/graph.c" 179 23 36#
           (#"/home/andrew/astraver/hw3/final/graph.c" 179 23 36#
           ((#"/home/andrew/astraver/hw3/final/graph.c" 179 24 30#
            (Int32.(<=) (#"graph_c.jc" 338 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !c))
           /\
           (#"/home/andrew/astraver/hw3/final/graph.c" 179 29 35#
           (Int32.(<=) !c !i)))))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/andrew/astraver/hw3/final/graph.c" 182 20 31#
          (Unsafe_int32.(<)  !i
           (acc  __anonstruct_Graph_4_ecnt_g_0_13 g_0_0 ) )) then ()
          else (raise (Goto_while_0_break_exc ())));
           try
            begin
            try
             begin
             (if
             (#"/home/andrew/astraver/hw3/final/graph.c" 183 12 32#
             (Unsafe_int32.(<>) 
              (acc  __anonstruct_Edge_3_existent_0_edges_32
               (shift_  (acc  __anonstruct_Graph_4_edges_g_0_13 g_0_0 )
                (Unsafe_int32.to_int  !i ) ) )
              (#"graph_c.jc" 347 33 45# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))
             then
              (if
              (#"/home/andrew/astraver/hw3/final/graph.c" 183 36 57#
              (Unsafe_int32.(=) 
               (acc  __anonstruct_Edge_3_from_edges_32
                (shift_  (acc  __anonstruct_Graph_4_edges_g_0_13 g_0_0 )
                 (Unsafe_int32.to_int  !i ) ) ) f_0 ))
              then
               (if
               (#"/home/andrew/astraver/hw3/final/graph.c" 183 61 80#
               (Unsafe_int32.(=) 
                (acc  __anonstruct_Edge_3_to_edges_32
                 (shift_  (acc  __anonstruct_Graph_4_edges_g_0_13 g_0_0 )
                  (Unsafe_int32.to_int  !i ) ) ) t_0 ))
               then
                begin
                (c :=
                 (Unsafe_int32.(+)  !c
                  (#"graph_c.jc" 360 68 80# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ));
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 185 23 52#
                 "expl:Assertion in line 185"
                 ((=)
                 (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
                 (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
                 __anonstruct_Graph_4_edges_g_0_13
                 __anonstruct_Edge_3_existent_0_edges_32
                 __anonstruct_Edge_3_to_edges_32
                 __anonstruct_Edge_3_from_edges_32) (1))) }); () end end
               else (raise (Goto__LAND_exc ())))
              else (raise (Goto__LAND_exc ())))
             else (raise (Goto__LAND_exc ())));
              (raise (Goto__LAND_0_exc ())); (raise (Goto__LAND_exc ())) end
             with Goto__LAND_exc _jessie_1 ->
             'U__LAND:
             'U__LAND:
             'U__LAND:
             'U__LAND:
             begin
             (assert {
             (#"/home/andrew/astraver/hw3/final/graph.c" 187 23 52#
             "expl:Assertion in line 187"
             ((=)
             (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
             (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
             __anonstruct_Graph_4_edges_g_0_13
             __anonstruct_Edge_3_existent_0_edges_32
             __anonstruct_Edge_3_to_edges_32
             __anonstruct_Edge_3_from_edges_32) (0))) }); () end end;
             (raise (Goto__LAND_0_exc ())) end with Goto__LAND_0_exc
            _jessie_2 -> 'U__LAND_0: 'U__LAND_0: () end;
           (i :=
            (Unsafe_int32.(+)  !i
             (#"graph_c.jc" 396 53 65# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_5 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_3 ->
      'While_0_break: 'While_0_break: () end;
     begin
     (assert {
     (#"/home/andrew/astraver/hw3/final/graph.c" 190 15 46#
     "expl:Assertion in line 190"
     ((=)
     (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
     __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
     __anonstruct_Edge_3_from_edges_32) (Int32.to_int !c))) }); () end;
     begin
     (assert {
     (#"/home/andrew/astraver/hw3/final/graph.c" 191 15 53#
     "expl:Assertion in line 191"
     ((=)
     (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_13 g_0_0))
     __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_32 __anonstruct_Edge_3_to_edges_32
     __anonstruct_Edge_3_from_edges_32) (0))) }); () end;
     begin (return := !c); (raise Return) end end)); absurd  end with Return
    -> !return end)
  
end

theory Logic_range_existent

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_4 : (pointer __anonstruct_Graph_4)) (m : int)
  (n_2 : int) (__anonstruct_Graph_4_edges_g_4_7_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_19_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (forall k_4 : int.
      ((((<=) m k_4) /\ ((<) k_4 n_2)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_19_at_L
       (shift (select __anonstruct_Graph_4_edges_g_4_7_at_L g_4) k_4))) (0)))))
  
  
end

theory Logic_full

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_3 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Graph_4_esize_g_3_6_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_3_6_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_51_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (range_existent g_3 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_3_6_at_L g_3))
     __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_51_at_L)
  
  
end

module Function_add_edge_safety
#"/home/andrew/astraver/hw3/final/graph.c" 213 0 32# "expl:add_edge, safety"

  use import core.Upd_safe 
  
  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import Axiomatic_LF__Axiomatic__l_count_empty_tail 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  let add_edge #"/home/andrew/astraver/hw3/final/graph.c" 213 0 32#
  "expl:Function add_edge, safety" =
  fun
   (g_6 : (pointer __anonstruct_Graph_4)) (f_2 : Int32.t) (t_2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_34 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_34 :
   ref (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_14
   : ref (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_33_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_34_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_33 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_g_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_14 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_esize_g_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_c.jc" 427 12 863#
   ((#"graph_c.jc" 427 12 863# _LF__Predicate__l_count_empty_tail) /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 202 11 20#
    (#"graph_c.jc" 427 12 863#
    ((#"graph_c.jc" 427 12 863#
     ((<=) (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\
    (#"graph_c.jc" 427 12 863#
    ((#"graph_c.jc" 427 12 863#
     ((>=) (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\ (#"graph_c.jc" 427 12 863# ((=) true true)))))))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 202 24 38#
    (graph_valid g_6 __anonstruct_Vertex_2_vertices_33_alloc_table
    __anonstruct_Edge_3_edges_34_alloc_table __anonstruct_Graph_4_esize_g_14
    !__anonstruct_Graph_4_ecnt_g_14 __anonstruct_Graph_4_edges_g_14
    __anonstruct_Graph_4_vsize_g_14 __anonstruct_Graph_4_vertices_g_14
    !__anonstruct_Edge_3_existent_0_edges_34 !__anonstruct_Edge_3_to_edges_34
    !__anonstruct_Edge_3_from_edges_34
    __anonstruct_Vertex_2_existent_vertices_33))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 203 11 26#
    (is_vertex g_6 (Int32.to_int f_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 204 11 26#
    (is_vertex g_6 (Int32.to_int t_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 205 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 206 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"/home/andrew/astraver/hw3/final/graph.c" 207 11 19#
   (not
   (full g_6 __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14
   !__anonstruct_Edge_3_existent_0_edges_34))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let i_0 = ref (Safe_int32.any_  () ) in
    (let i_0_0 = ref (Safe_int32.any_  () ) in
    (let l = ref (Safe_int32.any_  () ) in
    try
     begin
     (if
     (#"/home/andrew/astraver/hw3/final/graph.c" 215 8 26#
     (Safe_int32.(<) 
      (#"/home/andrew/astraver/hw3/final/graph.c" 215 8 15#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_g_14_alloc_table
       !__anonstruct_Graph_4_ecnt_g_14 g_6 ))
      (#"/home/andrew/astraver/hw3/final/graph.c" 215 18 26#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_g_14_alloc_table
       __anonstruct_Graph_4_esize_g_14 g_6 )) ))
     then
      try
       begin
       (let _jessie_93 =
       (let _jessie_92 = f_2 in
       begin
       (assert {
       (#"/home/andrew/astraver/hw3/final/graph.c" 216 8 34#
       "expl:Pointer index bounds" true) }); _jessie_92 end) in
       (let _jessie_94 =
       (#"/home/andrew/astraver/hw3/final/graph.c" 216 8 16#
       "expl:Pointer dereference"
       (acc  __anonstruct_Graph_4_g_14_alloc_table
        __anonstruct_Graph_4_edges_g_14 g_6 )) in
       (let _jessie_95 =
       (Safe_int32.to_int 
        (#"/home/andrew/astraver/hw3/final/graph.c" 216 17 24#
        "expl:Pointer dereference"
        (acc  __anonstruct_Graph_4_g_14_alloc_table
         !__anonstruct_Graph_4_ecnt_g_14 g_6 )) ) in
       (let _jessie_96 = (shift_typesafe  _jessie_94 _jessie_95 ) in
       (#"/home/andrew/astraver/hw3/final/graph.c" 216 8 34#
       "expl:Pointer dereference"
       (upd_offset_typesafe  __anonstruct_Edge_3_edges_34_alloc_table
        __anonstruct_Edge_3_from_edges_34 _jessie_94 _jessie_95 _jessie_93 ))))));
        begin
        (let _jessie_88 =
        (let _jessie_87 = t_2 in
        begin
        (assert {
        (#"/home/andrew/astraver/hw3/final/graph.c" 217 8 32#
        "expl:Pointer index bounds" true) }); _jessie_87 end) in
        (let _jessie_89 =
        (#"/home/andrew/astraver/hw3/final/graph.c" 217 8 16#
        "expl:Pointer dereference"
        (acc  __anonstruct_Graph_4_g_14_alloc_table
         __anonstruct_Graph_4_edges_g_14 g_6 )) in
        (let _jessie_90 =
        (Safe_int32.to_int 
         (#"/home/andrew/astraver/hw3/final/graph.c" 217 17 24#
         "expl:Pointer dereference"
         (acc  __anonstruct_Graph_4_g_14_alloc_table
          !__anonstruct_Graph_4_ecnt_g_14 g_6 )) ) in
        (let _jessie_91 = (shift_typesafe  _jessie_89 _jessie_90 ) in
        (#"/home/andrew/astraver/hw3/final/graph.c" 217 8 32#
        "expl:Pointer dereference"
        (upd_offset_typesafe  __anonstruct_Edge_3_edges_34_alloc_table
         __anonstruct_Edge_3_to_edges_34 _jessie_89 _jessie_90 _jessie_88 ))))));
         begin
         (let _jessie_83 =
         (let _jessie_82 =
         (#"graph_c.jc" 469 91 103# "expl:Integer cast"
         (Safe_int32.of_int (1))) in
         begin
         (assert {
         (#"/home/andrew/astraver/hw3/final/graph.c" 218 8 38#
         "expl:Pointer index bounds" true) }); _jessie_82 end) in
         (let _jessie_84 =
         (#"/home/andrew/astraver/hw3/final/graph.c" 218 8 16#
         "expl:Pointer dereference"
         (acc  __anonstruct_Graph_4_g_14_alloc_table
          __anonstruct_Graph_4_edges_g_14 g_6 )) in
         (let _jessie_85 =
         (Safe_int32.to_int 
          (#"/home/andrew/astraver/hw3/final/graph.c" 218 17 24#
          "expl:Pointer dereference"
          (acc  __anonstruct_Graph_4_g_14_alloc_table
           !__anonstruct_Graph_4_ecnt_g_14 g_6 )) ) in
         (let _jessie_86 = (shift_typesafe  _jessie_84 _jessie_85 ) in
         (#"/home/andrew/astraver/hw3/final/graph.c" 218 8 38#
         "expl:Pointer dereference"
         (upd_offset_typesafe  __anonstruct_Edge_3_edges_34_alloc_table
          __anonstruct_Edge_3_existent_0_edges_34 _jessie_84 _jessie_85
          _jessie_83 ))))));
          begin
          (let _jessie_78 =
          (let _jessie_77 =
          (Safe_int32.(+) 
           (#"/home/andrew/astraver/hw3/final/graph.c" 219 11 18#
           "expl:Pointer dereference"
           (acc  __anonstruct_Graph_4_g_14_alloc_table
            !__anonstruct_Graph_4_ecnt_g_14 g_6 ))
           (#"graph_c.jc" 471 59 71# "expl:Integer cast"
           (Safe_int32.of_int (1))) ) in
          begin
          (assert {
          (#"/home/andrew/astraver/hw3/final/graph.c" 219 8 18#
          "expl:Pointer index bounds" true) }); _jessie_77 end) in
          (let _jessie_79 = g_6 in
          (let _jessie_80 = (0) in
          (let _jessie_81 = _jessie_79 in
          (#"/home/andrew/astraver/hw3/final/graph.c" 219 8 18#
          "expl:Pointer dereference"
          (upd  __anonstruct_Graph_4_g_14_alloc_table
           __anonstruct_Graph_4_ecnt_g_14 _jessie_79 _jessie_78 ))))));
           begin
           any unit
           requires { true } reads { __anonstruct_Edge_3_existent_0_edges_34,
           __anonstruct_Edge_3_from_edges_34,
           __anonstruct_Edge_3_to_edges_34, __anonstruct_Graph_4_ecnt_g_14,
           f_2, g_6, t_2 }
           ensures {
             (#"/home/andrew/astraver/hw3/final/graph.c" 222 19 183#
             (forall f2 : int.
              (forall t2 : int.
               (((not ((=) f2 (Int32.to_int f_2))) \/
                (not ((=) t2 (Int32.to_int t_2)))) ->
                ((=)
                (count g_6 f2 t2
                (Int.(-)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                (1))
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34)
                (count g_6 f2 t2
                (Int.(-)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                (1))
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                !__anonstruct_Edge_3_to_edges_34 'Init) (at
                !__anonstruct_Edge_3_from_edges_34 'Init))))))) } ; () end;
           begin
           any unit
           requires { true } reads { __anonstruct_Edge_3_existent_0_edges_34,
           __anonstruct_Edge_3_from_edges_34,
           __anonstruct_Edge_3_to_edges_34, __anonstruct_Graph_4_ecnt_g_14,
           f_2, g_6, t_2 }
           ensures {
             (#"/home/andrew/astraver/hw3/final/graph.c" 228 12 232#
             (forall k_7 : int.
              ((((<=) (0) k_7) /\
               (((<) k_7
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6)))
               /\
               (not
               ((=) k_7
               (Int.(-)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               (1)))))) ->
               (forall f2_0 : int.
                (forall t2_0 : int.
                 (((not ((=) f2_0 (Int32.to_int f_2))) \/
                  (not ((=) t2_0 (Int32.to_int t_2)))) ->
                  ((=)
                  (count g_6 f2_0 t2_0 k_7 (Int.(+) k_7 (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_34
                  !__anonstruct_Edge_3_to_edges_34
                  !__anonstruct_Edge_3_from_edges_34)
                  (count g_6 f2_0 t2_0 k_7 (Int.(+) k_7 (1))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                  !__anonstruct_Edge_3_to_edges_34 'Init) (at
                  !__anonstruct_Edge_3_from_edges_34 'Init))))))))) } ; ()
           end;
           begin
           any unit
           requires { true } reads { __anonstruct_Edge_3_existent_0_edges_34,
           __anonstruct_Edge_3_from_edges_34,
           __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
           ensures {
             (#"/home/andrew/astraver/hw3/final/graph.c" 235 12 211#
             (forall k_8 : int.
              ((((<=) (0) k_8) /\
               ((<) k_8
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))))
               ->
               (forall f2_1 : int.
                (forall t2_1 : int.
                 (((not ((=) f2_1 (Int32.to_int f_2))) \/
                  (not ((=) t2_1 (Int32.to_int t_2)))) ->
                  ((=)
                  (count g_6 f2_1 t2_1 k_8 (Int.(+) k_8 (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_34
                  !__anonstruct_Edge_3_to_edges_34
                  !__anonstruct_Edge_3_from_edges_34)
                  (count g_6 f2_1 t2_1 k_8 (Int.(+) k_8 (1))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                  !__anonstruct_Edge_3_to_edges_34 'Init) (at
                  !__anonstruct_Edge_3_from_edges_34 'Init))))))))) } ; ()
           end;
           begin
           (i_0 :=
            (let _jessie_76 =
            (#"graph_c.jc" 539 25 37# "expl:Integer cast"
            (Safe_int32.of_int (0))) in
            begin
            (assert {
            (#"/home/andrew/astraver/hw3/final/graph.c" 241 16 17#
            "expl:Pointer index bounds" true) }); _jessie_76 end));
            'LoopEntry:
            begin
            'LoopEntry:
            'Loop_6:
            loop
            invariant { (#"graph_c.jc" 541 9 21314# true) }
              variant {
                (#"/home/andrew/astraver/hw3/final/graph.c" 334 29 41#
                (Int.(-)
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                (Int32.to_int !i_0))) }
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_34,
             __anonstruct_Edge_3_from_edges_34,
             __anonstruct_Edge_3_to_edges_34, __anonstruct_Graph_4_ecnt_g_14,
             f_2, g_6, t_2 }
             ensures {
               ((#"/home/andrew/astraver/hw3/final/graph.c" 327 31 317#
                (forall j_6 : int.
                 ((((<=) (0) j_6) /\ ((<=) j_6 (Int32.to_int !i_0))) ->
                  (forall f2_12 : int.
                   (forall t2_12 : int.
                    (((not ((=) f2_12 (Int32.to_int f_2))) \/
                     (not ((=) t2_12 (Int32.to_int t_2)))) ->
                     ((=)
                     (count g_6 f2_12 t2_12 (0) j_6
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (count g_6 f2_12 t2_12 (0) j_6
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init)))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 306 31 329#
                (forall j_5 : int.
                 ((((<=) (0) j_5) /\
                  ((<=) j_5 (Int.(-) (Int32.to_int !i_0) (1)))) ->
                  (forall f2_11 : int.
                   (forall t2_11 : int.
                    (((not ((=) f2_11 (Int32.to_int f_2))) \/
                     (not ((=) t2_11 (Int32.to_int t_2)))) ->
                     ((=)
                     (count g_6 f2_11 t2_11 j_5 (Int.(+) j_5 (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (count g_6 f2_11 t2_11 j_5 (Int.(+) j_5 (1))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init)))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 299 31 382#
                (forall j_4 : int.
                 ((((<=) (0) j_4) /\
                  (((>=) j_4 (Int.(-) (Int32.to_int !i_0) (1))) /\
                  ((<) j_4
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6)))))
                  ->
                  (forall f2_10 : int.
                   (forall t2_10 : int.
                    (((not ((=) f2_10 (Int32.to_int f_2))) \/
                     (not ((=) t2_10 (Int32.to_int t_2)))) ->
                     ((=)
                     (count g_6 f2_10 t2_10 (0) (Int.(+) j_4 (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (Int.(+)
                     (count g_6 f2_10 t2_10 (0) j_4
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (count g_6 f2_10 t2_10 j_4 (Int.(+) j_4 (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 292 31 361#
                (forall j_3 : int.
                 ((((<=) (0) j_3) /\
                  ((<=) j_3 (Int.(-) (Int32.to_int !i_0) (1)))) ->
                  (forall f2_9 : int.
                   (forall t2_9 : int.
                    (((not ((=) f2_9 (Int32.to_int f_2))) \/
                     (not ((=) t2_9 (Int32.to_int t_2)))) ->
                     ((=)
                     (count g_6 f2_9 t2_9 (0) (Int.(+) j_3 (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (Int.(+)
                     (count g_6 f2_9 t2_9 (0) j_3
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (count g_6 f2_9 t2_9 j_3 (Int.(+) j_3 (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 285 31 379#
                (forall j_2 : int.
                 ((((<=) (0) j_2) /\
                  (((>=) j_2 (Int.(-) (Int32.to_int !i_0) (1))) /\
                  ((<) j_2
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6)))))
                  ->
                  (forall f2_8 : int.
                   (forall t2_8 : int.
                    (((not ((=) f2_8 (Int32.to_int f_2))) \/
                     (not ((=) t2_8 (Int32.to_int t_2)))) ->
                     ((=)
                     (count g_6 f2_8 t2_8 (0) (Int.(+) j_2 (1))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init))
                     (Int.(+)
                     (count g_6 f2_8 t2_8 (0) j_2
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init))
                     (count g_6 f2_8 t2_8 j_2 (Int.(+) j_2 (1))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init))))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 278 31 358#
                (forall j_1 : int.
                 ((((<=) (0) j_1) /\
                  ((<=) j_1 (Int.(-) (Int32.to_int !i_0) (1)))) ->
                  (forall f2_7 : int.
                   (forall t2_7 : int.
                    (((not ((=) f2_7 (Int32.to_int f_2))) \/
                     (not ((=) t2_7 (Int32.to_int t_2)))) ->
                     ((=)
                     (count g_6 f2_7 t2_7 (0) (Int.(+) j_1 (1))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init))
                     (Int.(+)
                     (count g_6 f2_7 t2_7 (0) j_1
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init))
                     (count g_6 f2_7 t2_7 j_1 (Int.(+) j_1 (1))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                     !__anonstruct_Edge_3_to_edges_34 'Init) (at
                     !__anonstruct_Edge_3_from_edges_34 'Init))))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 275 31 132#
                ((Int32.(>=) !i_0
                 (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) ->
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (Int.(+)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init)) (1)))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 272 31 168#
                (((>=) (Int32.to_int !i_0)
                 (Int.(-)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1))) ->
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (Int.(+)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 269 31 165#
                (((>=) (Int32.to_int !i_0)
                 (Int.(-)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1))) ->
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init))
                 (Int.(+)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init))
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 266 31 125#
                ((Int32.(<) !i_0
                 (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) ->
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init)))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 263 31 167#
                (((<) (Int32.to_int !i_0)
                 (Int.(-)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1))) ->
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (Int.(+)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 260 31 164#
                (((<) (Int32.to_int !i_0)
                 (Int.(-)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1))) ->
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init))
                 (Int.(+)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init))
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                 !__anonstruct_Edge_3_to_edges_34 'Init) (at
                 !__anonstruct_Edge_3_from_edges_34 'Init))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 253 31 200#
                (forall j_0 : int.
                 ((((<=) (0) j_0) /\
                  (((<) j_0 (Int32.to_int !i_0)) /\
                  (not
                  ((=) j_0
                  (Int.(-)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  (1)))))) ->
                  ((=)
                  (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) j_0
                  (Int.(+) j_0 (1)) __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                  !__anonstruct_Edge_3_to_edges_34 'Init) (at
                  !__anonstruct_Edge_3_from_edges_34 'Init))
                  (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) j_0
                  (Int.(+) j_0 (1)) __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_34
                  !__anonstruct_Edge_3_to_edges_34
                  !__anonstruct_Edge_3_from_edges_34)))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 249 31 180#
                (forall j : int.
                 ((((<=) (0) j) /\
                  (((<) j (Int32.to_int !i_0)) /\
                  (not
                  ((=) j
                  (Int.(-)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  (1)))))) ->
                  ((Int32.(=)
                   (select (at !__anonstruct_Edge_3_from_edges_34 'Init)
                   (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))
                   (select !__anonstruct_Edge_3_from_edges_34
                   (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j)))
                  /\
                  ((Int32.(=)
                   (select (at !__anonstruct_Edge_3_to_edges_34 'Init)
                   (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))
                   (select !__anonstruct_Edge_3_to_edges_34
                   (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j)))
                  /\
                  (Int32.(=)
                  (select (at !__anonstruct_Edge_3_existent_0_edges_34 'Init)
                  (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))
                  (select !__anonstruct_Edge_3_existent_0_edges_34
                  (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 247 31 45#
                (graph_valid g_6
                __anonstruct_Vertex_2_vertices_33_alloc_table
                __anonstruct_Edge_3_edges_34_alloc_table
                __anonstruct_Graph_4_esize_g_14
                !__anonstruct_Graph_4_ecnt_g_14
                __anonstruct_Graph_4_edges_g_14
                __anonstruct_Graph_4_vsize_g_14
                __anonstruct_Graph_4_vertices_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34
                __anonstruct_Vertex_2_existent_vertices_33))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 246 31 69#
                (if
                 ((<=) (0)
                 (Int.(-)
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 (1))) then
                 (((<=)
                  (offset_min __anonstruct_Edge_3_edges_34_alloc_table
                  (select __anonstruct_Graph_4_edges_g_14 g_6)) (0))
                 /\
                 (((>=)
                  (offset_max __anonstruct_Edge_3_edges_34_alloc_table
                  (select __anonstruct_Graph_4_edges_g_14 g_6))
                  (Int.(-)
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  (1)))
                 /\
                 (forall __framac_tmp6 : int.
                  ((((<=) (0) __framac_tmp6) /\
                   ((<=) __framac_tmp6
                   (Int.(-)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))) ->
                   ((=) true true))))) else ((=) true true)))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                (#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                ((#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                 ((<=) (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6)
                 (0)))
                /\
                (#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                ((#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                 ((>=) (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6)
                 (0)))
                /\
                (#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                ((=) true true)))))))
               /\
               ((#"/home/andrew/astraver/hw3/final/graph.c" 244 31 44#
                (Int32.(<=) !i_0
                (select __anonstruct_Graph_4_esize_g_14 g_6)))
               /\
               (#"/home/andrew/astraver/hw3/final/graph.c" 243 31 37#
               (Int32.(>=) !i_0 (#"graph_c.jc" 546 39 51# "expl:Integer cast"
               (Int32.of_int (0))))))))))))))))))))))) } ;
              try
               begin
               'LoopCurrent:
               begin
               'LoopCurrent:
               (if
               (#"/home/andrew/astraver/hw3/final/graph.c" 336 19 31#
               (Safe_int32.(<)  !i_0
                (#"/home/andrew/astraver/hw3/final/graph.c" 336 23 31#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_14_alloc_table
                 __anonstruct_Graph_4_esize_g_14 g_6 )) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
                begin
                (i_0 :=
                 (let _jessie_75 =
                 (Safe_int32.(+)  !i_0
                  (#"graph_c.jc" 739 63 75# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) in
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 337 16 19#
                 "expl:Pointer index bounds" true) }); _jessie_75 end));
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_34,
                 __anonstruct_Edge_3_from_edges_34,
                 __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/andrew/astraver/hw3/final/graph.c" 338 27 144#
                   (forall f2_2 : int.
                    (forall t2_2 : int.
                     (((not ((=) f2_2 (Int32.to_int f_2))) \/
                      (not ((=) t2_2 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_2 t2_2 (Int.(-) (Int32.to_int !i_0) (1))
                      (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34)
                      (count g_6 f2_2 t2_2 (Int.(-) (Int32.to_int !i_0) (1))
                      (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_34,
                 __anonstruct_Edge_3_from_edges_34,
                 __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/andrew/astraver/hw3/final/graph.c" 339 27 176#
                   (forall f2_3 : int.
                    (forall t2_3 : int.
                     (((not ((=) f2_3 (Int32.to_int f_2))) \/
                      (not ((=) t2_3 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_3 t2_3 (0) (Int32.to_int !i_0)
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34)
                      (Int.(+)
                      (count g_6 f2_3 t2_3 (0)
                      (Int.(-) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34)
                      (count g_6 f2_3 t2_3 (Int.(-) (Int32.to_int !i_0) (1))
                      (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34))))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_34,
                 __anonstruct_Edge_3_from_edges_34,
                 __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/andrew/astraver/hw3/final/graph.c" 340 27 173#
                   (forall f2_4 : int.
                    (forall t2_4 : int.
                     (((not ((=) f2_4 (Int32.to_int f_2))) \/
                      (not ((=) t2_4 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_4 t2_4 (0) (Int32.to_int !i_0)
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init))
                      (Int.(+)
                      (count g_6 f2_4 t2_4 (0)
                      (Int.(-) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init))
                      (count g_6 f2_4 t2_4 (Int.(-) (Int32.to_int !i_0) (1))
                      (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init)))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_34,
                 __anonstruct_Edge_3_from_edges_34,
                 __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/andrew/astraver/hw3/final/graph.c" 341 27 144#
                   (forall f2_5 : int.
                    (forall t2_5 : int.
                     (((not ((=) f2_5 (Int32.to_int f_2))) \/
                      (not ((=) t2_5 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_5 t2_5 (0)
                      (Int.(-) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34)
                      (count g_6 f2_5 t2_5 (0)
                      (Int.(-) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_34,
                 __anonstruct_Edge_3_from_edges_34,
                 __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/andrew/astraver/hw3/final/graph.c" 342 27 174#
                   (forall f2_6 : int.
                    (forall t2_6 : int.
                     (((not ((=) f2_6 (Int32.to_int f_2))) \/
                      (not ((=) t2_6 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_6 t2_6 (0) (Int32.to_int !i_0)
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34)
                      (Int.(+)
                      (count g_6 f2_6 t2_6 (0)
                      (Int.(-) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init))
                      (count g_6 f2_6 t2_6 (Int.(-) (Int32.to_int !i_0) (1))
                      (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init)))))))) } ; ()
                 end end end; (raise (Loop_continue_exc ())) end with
               Loop_continue_exc _jessie_11 -> () end end end;
             (raise (Goto_while_0_break_0_exc ())) end end end end end end
       with Goto_while_0_break_0_exc _jessie_6 ->
       'While_0_break_0:
       'While_0_break_0: begin (); (raise (Return_label_exc ())) end end
     else ());
      try
       begin
       (i_0_0 :=
        (let _jessie_115 =
        (#"graph_c.jc" 875 28 40# "expl:Integer cast"
        (Safe_int32.of_int (0))) in
        begin
        (assert {
        (#"/home/andrew/astraver/hw3/final/graph.c" 371 13 14#
        "expl:Pointer index bounds" true) }); _jessie_115 end));
        'LoopEntry:
        begin
        'LoopEntry:
        'Loop_7:
        loop
        invariant { (#"graph_c.jc" 877 9 38926# true) }
          variant { (#"/home/andrew/astraver/hw3/final/graph.c" 369 21 32#
            (Int.(-)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
            (Int32.to_int !i_0_0))) }
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_34,
         __anonstruct_Edge_3_from_edges_34, __anonstruct_Edge_3_to_edges_34,
         __anonstruct_Graph_4_ecnt_g_14, f_2, g_6, t_2 }
         ensures {
           ((#"/home/andrew/astraver/hw3/final/graph.c" 365 23 118#
            (forall f2_25 : int.
             (forall t2_25 : int.
              (forall m_12 : int.
               (forall n_12 : int.
                ((=)
                (count g_6 f2_25 t2_25 m_12 n_12
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34)
                (count g_6 f2_25 t2_25 m_12 n_12
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                !__anonstruct_Edge_3_to_edges_34 'Init) (at
                !__anonstruct_Edge_3_from_edges_34 'Init))))))))
           /\
           ((#"/home/andrew/astraver/hw3/final/graph.c" 361 23 151#
            (forall f2_24 : int.
             (forall t2_24 : int.
              (((not ((=) f2_24 (Int32.to_int f_2))) \/
               (not ((=) t2_24 (Int32.to_int t_2)))) ->
               ((=)
               (all_count g_6 f2_24 t2_24 __anonstruct_Graph_4_esize_g_14
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_34
               !__anonstruct_Edge_3_to_edges_34
               !__anonstruct_Edge_3_from_edges_34)
               (all_count g_6 f2_24 t2_24 __anonstruct_Graph_4_esize_g_14
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
               !__anonstruct_Edge_3_to_edges_34 'Init) (at
               !__anonstruct_Edge_3_from_edges_34 'Init)))))))
           /\
           ((#"/home/andrew/astraver/hw3/final/graph.c" 359 23 37#
            (graph_valid g_6 __anonstruct_Vertex_2_vertices_33_alloc_table
            __anonstruct_Edge_3_edges_34_alloc_table
            __anonstruct_Graph_4_esize_g_14 !__anonstruct_Graph_4_ecnt_g_14
            __anonstruct_Graph_4_edges_g_14 __anonstruct_Graph_4_vsize_g_14
            __anonstruct_Graph_4_vertices_g_14
            !__anonstruct_Edge_3_existent_0_edges_34
            !__anonstruct_Edge_3_to_edges_34
            !__anonstruct_Edge_3_from_edges_34
            __anonstruct_Vertex_2_existent_vertices_33))
           /\
           ((#"/home/andrew/astraver/hw3/final/graph.c" 356 23 99#
            (forall j_16 : int.
             ((((<=) (0) j_16) /\ ((<) j_16 (Int32.to_int !i_0_0))) ->
              (not
              (Int32.(=)
              (select !__anonstruct_Edge_3_existent_0_edges_34
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j_16))
              (#"graph_c.jc" 893 40 52# "expl:Integer cast" (Int32.of_int
              (0))))))))
           /\
           ((#"/home/andrew/astraver/hw3/final/graph.c" 353 23 104#
            (exists j_15 : int.
             (((<=) (0) j_15) /\
             (((<) j_15
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)))
             /\
             (Int32.(=)
             (select !__anonstruct_Edge_3_existent_0_edges_34
             (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j_15))
             (#"graph_c.jc" 887 37 49# "expl:Integer cast" (Int32.of_int
             (0))))))))
           /\
           ((#"/home/andrew/astraver/hw3/final/graph.c" 351 23 35#
            (Int32.(<=) !i_0_0 (select !__anonstruct_Graph_4_ecnt_g_14 g_6)))
           /\
           (#"/home/andrew/astraver/hw3/final/graph.c" 350 23 29#
           (Int32.(>=) !i_0_0 (#"graph_c.jc" 879 41 53# "expl:Integer cast"
           (Int32.of_int (0))))))))))) } ;
          try
           begin
           'LoopCurrent:
           begin
           'LoopCurrent:
           (if
           (#"/home/andrew/astraver/hw3/final/graph.c" 371 20 31#
           (Safe_int32.(<)  !i_0_0
            (#"/home/andrew/astraver/hw3/final/graph.c" 371 24 31#
            "expl:Pointer dereference"
            (acc  __anonstruct_Graph_4_g_14_alloc_table
             !__anonstruct_Graph_4_ecnt_g_14 g_6 )) )) then ()
           else (raise (Goto_while_0_break_0_0_exc ())));
            'U__Pre1:
            'U__Pre1:
            (if
            (#"/home/andrew/astraver/hw3/final/graph.c" 373 12 33#
            (Bool.notb 
             (Safe_int32.(<>) 
              (#"/home/andrew/astraver/hw3/final/graph.c" 373 13 33#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_34_alloc_table
               !__anonstruct_Edge_3_existent_0_edges_34
               (#"/home/andrew/astraver/hw3/final/graph.c" 373 13 21#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_14_alloc_table
                __anonstruct_Graph_4_edges_g_14 g_6 ))
               (Safe_int32.to_int  !i_0_0 ) ))
              (#"graph_c.jc" 920 46 58# "expl:Integer cast"
              (Safe_int32.of_int (0))) ) ))
            then
             try
              begin
              (let _jessie_110 =
              (let _jessie_109 = f_2 in
              begin
              (assert {
              (#"/home/andrew/astraver/hw3/final/graph.c" 374 12 32#
              "expl:Pointer index bounds" true) }); _jessie_109 end) in
              (let _jessie_111 =
              (#"/home/andrew/astraver/hw3/final/graph.c" 374 12 20#
              "expl:Pointer dereference"
              (acc  __anonstruct_Graph_4_g_14_alloc_table
               __anonstruct_Graph_4_edges_g_14 g_6 )) in
              (let _jessie_112 = (Safe_int32.to_int  !i_0_0 ) in
              (let _jessie_113 = (shift_typesafe  _jessie_111 _jessie_112 )
              in
              (#"/home/andrew/astraver/hw3/final/graph.c" 374 12 32#
              "expl:Pointer dereference"
              (upd_offset_typesafe  __anonstruct_Edge_3_edges_34_alloc_table
               __anonstruct_Edge_3_from_edges_34 _jessie_111 _jessie_112
               _jessie_110 ))))));
               begin
               (let _jessie_105 =
               (let _jessie_104 = t_2 in
               begin
               (assert {
               (#"/home/andrew/astraver/hw3/final/graph.c" 375 12 30#
               "expl:Pointer index bounds" true) }); _jessie_104 end) in
               (let _jessie_106 =
               (#"/home/andrew/astraver/hw3/final/graph.c" 375 12 20#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_14_alloc_table
                __anonstruct_Graph_4_edges_g_14 g_6 )) in
               (let _jessie_107 = (Safe_int32.to_int  !i_0_0 ) in
               (let _jessie_108 = (shift_typesafe  _jessie_106 _jessie_107 )
               in
               (#"/home/andrew/astraver/hw3/final/graph.c" 375 12 30#
               "expl:Pointer dereference"
               (upd_offset_typesafe  __anonstruct_Edge_3_edges_34_alloc_table
                __anonstruct_Edge_3_to_edges_34 _jessie_106 _jessie_107
                _jessie_105 ))))));
                begin
                (let _jessie_100 =
                (let _jessie_99 =
                (#"graph_c.jc" 926 85 97# "expl:Integer cast"
                (Safe_int32.of_int (1))) in
                begin
                (assert {
                (#"/home/andrew/astraver/hw3/final/graph.c" 376 12 36#
                "expl:Pointer index bounds" true) }); _jessie_99 end) in
                (let _jessie_101 =
                (#"/home/andrew/astraver/hw3/final/graph.c" 376 12 20#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_14_alloc_table
                 __anonstruct_Graph_4_edges_g_14 g_6 )) in
                (let _jessie_102 = (Safe_int32.to_int  !i_0_0 ) in
                (let _jessie_103 = (shift_typesafe  _jessie_101 _jessie_102 )
                in
                (#"/home/andrew/astraver/hw3/final/graph.c" 376 12 36#
                "expl:Pointer dereference"
                (upd_offset_typesafe 
                 __anonstruct_Edge_3_edges_34_alloc_table
                 __anonstruct_Edge_3_existent_0_edges_34 _jessie_101
                 _jessie_102 _jessie_100 ))))));
                 begin
                 (l :=
                  (let _jessie_98 =
                  (#"graph_c.jc" 927 45 57# "expl:Integer cast"
                  (Safe_int32.of_int (0))) in
                  begin
                  (assert {
                  (#"/home/andrew/astraver/hw3/final/graph.c" 379 20 21#
                  "expl:Pointer index bounds" true) }); _jessie_98 end));
                  'LoopEntry:
                  begin
                  'LoopEntry:
                  'Loop_8:
                  loop
                  invariant { (#"graph_c.jc" 929 30 34665# true) }
                    variant {
                      (#"/home/andrew/astraver/hw3/final/graph.c" 455 33 45#
                      (Int.(-)
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      (Int32.to_int !l))) }
                   begin
                   any unit
                   requires { true } reads {
                   __anonstruct_Edge_3_existent_0_edges_34,
                   __anonstruct_Edge_3_from_edges_34,
                   __anonstruct_Edge_3_to_edges_34,
                   __anonstruct_Graph_4_ecnt_g_14, f_2, g_6, t_2 }
                   ensures {
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 448 35 342#
                      (forall j_14 : int.
                       ((((<=) (0) j_14) /\ ((<=) j_14 (Int32.to_int !l))) ->
                        (forall f2_23 : int.
                         (forall t2_23 : int.
                          (((not ((=) f2_23 (Int32.to_int f_2))) \/
                           (not ((=) t2_23 (Int32.to_int t_2)))) ->
                           ((=)
                           (count g_6 f2_23 t2_23 (0) j_14
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)
                           (count g_6 f2_23 t2_23 (0) j_14
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1)))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 441 35 354#
                      (forall j_13 : int.
                       ((((<=) (0) j_13) /\
                        ((<=) j_13 (Int.(-) (Int32.to_int !l) (1)))) ->
                        (forall f2_22 : int.
                         (forall t2_22 : int.
                          (((not ((=) f2_22 (Int32.to_int f_2))) \/
                           (not ((=) t2_22 (Int32.to_int t_2)))) ->
                           ((=)
                           (count g_6 f2_22 t2_22 j_13 (Int.(+) j_13 (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)
                           (count g_6 f2_22 t2_22 j_13 (Int.(+) j_13 (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1)))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 434 35 406#
                      (forall j_12 : int.
                       ((((<=) (0) j_12) /\
                        (((>=) j_12 (Int.(-) (Int32.to_int !l) (1))) /\
                        ((<) j_12
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6))))) ->
                        (forall f2_21 : int.
                         (forall t2_21 : int.
                          (((not ((=) f2_21 (Int32.to_int f_2))) \/
                           (not ((=) t2_21 (Int32.to_int t_2)))) ->
                           ((=)
                           (count g_6 f2_21 t2_21 (0) (Int.(+) j_12 (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)
                           (Int.(+)
                           (count g_6 f2_21 t2_21 (0) j_12
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)
                           (count g_6 f2_21 t2_21 j_12 (Int.(+) j_12 (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 427 35 385#
                      (forall j_11 : int.
                       ((((<=) (0) j_11) /\
                        ((<=) j_11 (Int.(-) (Int32.to_int !l) (1)))) ->
                        (forall f2_20 : int.
                         (forall t2_20 : int.
                          (((not ((=) f2_20 (Int32.to_int f_2))) \/
                           (not ((=) t2_20 (Int32.to_int t_2)))) ->
                           ((=)
                           (count g_6 f2_20 t2_20 (0) (Int.(+) j_11 (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)
                           (Int.(+)
                           (count g_6 f2_20 t2_20 (0) j_11
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)
                           (count g_6 f2_20 t2_20 j_11 (Int.(+) j_11 (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_34
                           !__anonstruct_Edge_3_to_edges_34
                           !__anonstruct_Edge_3_from_edges_34)))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 420 35 406#
                      (forall j_10 : int.
                       ((((<=) (0) j_10) /\
                        (((>=) j_10 (Int.(-) (Int32.to_int !l) (1))) /\
                        ((<) j_10
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6))))) ->
                        (forall f2_19 : int.
                         (forall t2_19 : int.
                          (((not ((=) f2_19 (Int32.to_int f_2))) \/
                           (not ((=) t2_19 (Int32.to_int t_2)))) ->
                           ((=)
                           (count g_6 f2_19 t2_19 (0) (Int.(+) j_10 (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                           (Int.(+)
                           (count g_6 f2_19 t2_19 (0) j_10
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                           (count g_6 f2_19 t2_19 j_10 (Int.(+) j_10 (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 413 35 365#
                      (forall j_9 : int.
                       ((((<=) (0) j_9) /\
                        ((<=) j_9 (Int.(-) (Int32.to_int !l) (1)))) ->
                        (forall f2_18 : int.
                         (forall t2_18 : int.
                          (((not ((=) f2_18 (Int32.to_int f_2))) \/
                           (not ((=) t2_18 (Int32.to_int t_2)))) ->
                           ((=)
                           (count g_6 f2_18 t2_18 (0) (Int.(+) j_9 (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                           (Int.(+)
                           (count g_6 f2_18 t2_18 (0) j_9
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                           (count g_6 f2_18 t2_18 j_9 (Int.(+) j_9 (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                           (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                           !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 410 35 138#
                      ((Int32.(>) !l !i_0_0) ->
                       ((=)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (Int.(+)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1)) (1)))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 407 35 173#
                      (((>) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                       ((=)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (Int.(+)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 404 35 169#
                      (((>) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                       ((=)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                       (Int.(+)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 401 35 132#
                      ((Int32.(<=) !l !i_0_0) ->
                       ((=)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 398 35 168#
                      (((<=) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                       ((=)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (Int.(+)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 395 35 168#
                      (((<=) (Int32.to_int !l)
                       (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                       ((=)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                       (Int.(+)
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                       (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                       (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                       (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                       !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 391 35 203#
                      (forall j_8 : int.
                       ((((<=) (0) j_8) /\
                        (((<) j_8 (Int32.to_int !l)) /\
                        (not ((=) j_8 (Int32.to_int !i_0_0))))) ->
                        ((=)
                        (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) j_8
                        (Int.(+) j_8 (1)) __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                        (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                        !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                        (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) j_8
                        (Int.(+) j_8 (1)) __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_34
                        !__anonstruct_Edge_3_to_edges_34
                        !__anonstruct_Edge_3_from_edges_34)))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 387 35 183#
                      (forall j_7 : int.
                       ((((<=) (0) j_7) /\
                        (((<) j_7 (Int32.to_int !l)) /\
                        (not ((=) j_7 (Int32.to_int !i_0_0))))) ->
                        ((Int32.(=)
                         (select (at !__anonstruct_Edge_3_from_edges_34
                         'U__Pre1)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         j_7))
                         (select !__anonstruct_Edge_3_from_edges_34
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         j_7)))
                        /\
                        ((Int32.(=)
                         (select (at !__anonstruct_Edge_3_to_edges_34
                         'U__Pre1)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         j_7))
                         (select !__anonstruct_Edge_3_to_edges_34
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         j_7)))
                        /\
                        (Int32.(=)
                        (select (at !__anonstruct_Edge_3_existent_0_edges_34
                        'U__Pre1)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        j_7))
                        (select !__anonstruct_Edge_3_existent_0_edges_34
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        j_7))))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 385 35 49#
                      (graph_valid g_6
                      __anonstruct_Vertex_2_vertices_33_alloc_table
                      __anonstruct_Edge_3_edges_34_alloc_table
                      __anonstruct_Graph_4_esize_g_14
                      !__anonstruct_Graph_4_ecnt_g_14
                      __anonstruct_Graph_4_edges_g_14
                      __anonstruct_Graph_4_vsize_g_14
                      __anonstruct_Graph_4_vertices_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34
                      __anonstruct_Vertex_2_existent_vertices_33))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 384 35 73#
                      (if
                       ((<=) (0)
                       (Int.(-)
                       (Int32.to_int
                       (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))
                       then
                       (((<=)
                        (offset_min __anonstruct_Edge_3_edges_34_alloc_table
                        (select __anonstruct_Graph_4_edges_g_14 g_6)) (0))
                       /\
                       (((>=)
                        (offset_max __anonstruct_Edge_3_edges_34_alloc_table
                        (select __anonstruct_Graph_4_edges_g_14 g_6))
                        (Int.(-)
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))
                       /\
                       (forall __framac_tmp8 : int.
                        ((((<=) (0) __framac_tmp8) /\
                         ((<=) __framac_tmp8
                         (Int.(-)
                         (Int32.to_int
                         (select __anonstruct_Graph_4_esize_g_14 g_6)) (1))))
                         -> ((=) true true))))) else ((=) true true)))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                      (#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                      ((#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                       ((<=)
                       (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6)
                       (0)))
                      /\
                      (#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                      ((#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                       ((>=)
                       (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6)
                       (0)))
                      /\
                      (#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                      ((=) true true)))))))
                     /\
                     ((#"/home/andrew/astraver/hw3/final/graph.c" 382 35 48#
                      (Int32.(<=) !l
                      (select __anonstruct_Graph_4_esize_g_14 g_6)))
                     /\
                     (#"/home/andrew/astraver/hw3/final/graph.c" 381 35 41#
                     (Int32.(>=) !l (#"graph_c.jc" 934 58 70#
                     "expl:Integer cast" (Int32.of_int (0)))))))))))))))))))))))
                     } ;
                    try
                     begin
                     'LoopCurrent:
                     begin
                     'LoopCurrent:
                     (if
                     (#"/home/andrew/astraver/hw3/final/graph.c" 458 23 35#
                     (Safe_int32.(<)  !l
                      (#"/home/andrew/astraver/hw3/final/graph.c" 458 27 35#
                      "expl:Pointer dereference"
                      (acc  __anonstruct_Graph_4_g_14_alloc_table
                       __anonstruct_Graph_4_esize_g_14 g_6 )) )) then ()
                     else (raise (Goto_while_1_break_exc ())));
                      begin
                      (l :=
                       (let _jessie_97 =
                       (Safe_int32.(+)  !l
                        (#"graph_c.jc" 1255 67 79# "expl:Integer cast"
                        (Safe_int32.of_int (1))) ) in
                       begin
                       (assert {
                       (#"/home/andrew/astraver/hw3/final/graph.c" 459 20 23#
                       "expl:Pointer index bounds" true) }); _jessie_97 end));
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                       ensures {
                         (#"/home/andrew/astraver/hw3/final/graph.c" 460 31 149#
                         (forall f2_13 : int.
                          (forall t2_13 : int.
                           (((not ((=) f2_13 (Int32.to_int f_2))) \/
                            (not ((=) t2_13 (Int32.to_int t_2)))) ->
                            ((=)
                            (count g_6 f2_13 t2_13
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34)
                            (count g_6 f2_13 t2_13
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1))))))) } ; () end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                       ensures {
                         (#"/home/andrew/astraver/hw3/final/graph.c" 461 31 180#
                         (forall f2_14 : int.
                          (forall t2_14 : int.
                           (((not ((=) f2_14 (Int32.to_int f_2))) \/
                            (not ((=) t2_14 (Int32.to_int t_2)))) ->
                            ((=)
                            (count g_6 f2_14 t2_14 (0) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34)
                            (Int.(+)
                            (count g_6 f2_14 t2_14 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34)
                            (count g_6 f2_14 t2_14
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34))))))) } ; ()
                       end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                       ensures {
                         (#"/home/andrew/astraver/hw3/final/graph.c" 462 31 180#
                         (forall f2_15 : int.
                          (forall t2_15 : int.
                           (((not ((=) f2_15 (Int32.to_int f_2))) \/
                            (not ((=) t2_15 (Int32.to_int t_2)))) ->
                            ((=)
                            (count g_6 f2_15 t2_15 (0) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1))
                            (Int.(+)
                            (count g_6 f2_15 t2_15 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1))
                            (count g_6 f2_15 t2_15
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1)))))))) } ; () end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                       ensures {
                         (#"/home/andrew/astraver/hw3/final/graph.c" 463 31 149#
                         (forall f2_16 : int.
                          (forall t2_16 : int.
                           (((not ((=) f2_16 (Int32.to_int f_2))) \/
                            (not ((=) t2_16 (Int32.to_int t_2)))) ->
                            ((=)
                            (count g_6 f2_16 t2_16 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34)
                            (count g_6 f2_16 t2_16 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1))))))) } ; () end;
                       begin
                       any unit
                       requires { true } reads {
                       __anonstruct_Edge_3_existent_0_edges_34,
                       __anonstruct_Edge_3_from_edges_34,
                       __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
                       ensures {
                         (#"/home/andrew/astraver/hw3/final/graph.c" 464 31 180#
                         (forall f2_17 : int.
                          (forall t2_17 : int.
                           (((not ((=) f2_17 (Int32.to_int f_2))) \/
                            (not ((=) t2_17 (Int32.to_int t_2)))) ->
                            ((=)
                            (count g_6 f2_17 t2_17 (0) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34)
                            (Int.(+)
                            (count g_6 f2_17 t2_17 (0)
                            (Int.(-) (Int32.to_int !l) (1))
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1))
                            (count g_6 f2_17 t2_17
                            (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1)))))))) } ; () end end end;
                      (raise (Loop_continue_exc ())) end with
                     Loop_continue_exc _jessie_13 -> () end end end;
                   (raise (Goto_while_1_break_exc ())) end end end end end
              with Goto_while_1_break_exc _jessie_7 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads {
               __anonstruct_Edge_3_existent_0_edges_34,
               __anonstruct_Edge_3_from_edges_34,
               __anonstruct_Edge_3_to_edges_34, f_2, g_6, t_2 }
               ensures {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 467 23 75#
                 ((=)
                 (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 __anonstruct_Graph_4_esize_g_14
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_34
                 !__anonstruct_Edge_3_to_edges_34
                 !__anonstruct_Edge_3_from_edges_34)
                 (Int.(+)
                 (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 __anonstruct_Graph_4_esize_g_14
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
                 !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                 !__anonstruct_Edge_3_from_edges_34 'U__Pre1)) (1)))) } ; ()
               end; (raise (Return_label_exc ())) end end else ());
            (i_0_0 :=
             (let _jessie_114 =
             (Safe_int32.(+)  !i_0_0
              (#"graph_c.jc" 1415 64 76# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) in
             begin
             (assert {
             (#"/home/andrew/astraver/hw3/final/graph.c" 371 33 36#
             "expl:Pointer index bounds" true) }); _jessie_114 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end;
         (raise (Goto_while_0_break_0_0_exc ())) end end with
       Goto_while_0_break_0_0_exc _jessie_8 ->
       'While_0_break_0_0: 'While_0_break_0_0: () end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_9 ->
     'Return_label: 'Return_label: (raise Return) end))); (raise Return) end
    with Return -> () end
  
end

module Function_add_edge_behaviors
#"/home/andrew/astraver/hw3/final/graph.c" 213 0 32#
"expl:add_edge, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import Axiomatic_LF__Axiomatic__l_count_empty_tail 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let add_edge_ensures_default
  #"/home/andrew/astraver/hw3/final/graph.c" 213 0 32#
  "expl:Function add_edge, default behavior" =
  fun
   (g_6 : (pointer __anonstruct_Graph_4)) (f_2 : Int32.t) (t_2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_34 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_34 :
   ref (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_14
   : ref (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_33_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_34_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_33 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_g_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_14 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_esize_g_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_c.jc" 427 12 863#
   ((#"graph_c.jc" 427 12 863# _LF__Predicate__l_count_empty_tail) /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 202 11 20#
    (#"graph_c.jc" 427 12 863#
    ((#"graph_c.jc" 427 12 863#
     ((<=) (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\
    (#"graph_c.jc" 427 12 863#
    ((#"graph_c.jc" 427 12 863#
     ((>=) (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\ (#"graph_c.jc" 427 12 863# ((=) true true)))))))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 202 24 38#
    (graph_valid g_6 __anonstruct_Vertex_2_vertices_33_alloc_table
    __anonstruct_Edge_3_edges_34_alloc_table __anonstruct_Graph_4_esize_g_14
    !__anonstruct_Graph_4_ecnt_g_14 __anonstruct_Graph_4_edges_g_14
    __anonstruct_Graph_4_vsize_g_14 __anonstruct_Graph_4_vertices_g_14
    !__anonstruct_Edge_3_existent_0_edges_34 !__anonstruct_Edge_3_to_edges_34
    !__anonstruct_Edge_3_from_edges_34
    __anonstruct_Vertex_2_existent_vertices_33))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 203 11 26#
    (is_vertex g_6 (Int32.to_int f_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 204 11 26#
    (is_vertex g_6 (Int32.to_int t_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 205 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_c.jc" 427 12 863#
   ((#"/home/andrew/astraver/hw3/final/graph.c" 206 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_33
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"/home/andrew/astraver/hw3/final/graph.c" 207 11 19#
   (not
   (full g_6 __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14
   !__anonstruct_Edge_3_existent_0_edges_34))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
     "expl:Ensures clause"
     (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
     "expl:Ensures clause"
     ((#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
      "expl:Ensures clause"
      (graph_valid g_6 __anonstruct_Vertex_2_vertices_33_alloc_table
      __anonstruct_Edge_3_edges_34_alloc_table
      __anonstruct_Graph_4_esize_g_14 !__anonstruct_Graph_4_ecnt_g_14
      __anonstruct_Graph_4_edges_g_14 __anonstruct_Graph_4_vsize_g_14
      __anonstruct_Graph_4_vertices_g_14
      !__anonstruct_Edge_3_existent_0_edges_34
      !__anonstruct_Edge_3_to_edges_34 !__anonstruct_Edge_3_from_edges_34
      __anonstruct_Vertex_2_existent_vertices_33))
     /\
     (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
     "expl:Ensures clause"
     ((#"/home/andrew/astraver/hw3/final/graph.c" 209 10 59#
      "expl:Ensures clause"
      ((=)
      (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
      __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14
      !__anonstruct_Edge_3_existent_0_edges_34
      !__anonstruct_Edge_3_to_edges_34 !__anonstruct_Edge_3_from_edges_34)
      (Int.(+)
      (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
      __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14 (old
      !__anonstruct_Edge_3_existent_0_edges_34) (old
      !__anonstruct_Edge_3_to_edges_34) (old
      !__anonstruct_Edge_3_from_edges_34)) (1))))
     /\
     (#"/home/andrew/astraver/hw3/final/graph.c" 210 10 108#
     "expl:Ensures clause"
     (forall f2_26 : int.
      (forall t2_26 : int.
       (((not ((=) f2_26 (Int32.to_int f_2))) \/
        (not ((=) t2_26 (Int32.to_int t_2)))) ->
        ((=)
        (all_count g_6 f2_26 t2_26 __anonstruct_Graph_4_esize_g_14
        __anonstruct_Graph_4_edges_g_14
        !__anonstruct_Edge_3_existent_0_edges_34
        !__anonstruct_Edge_3_to_edges_34 !__anonstruct_Edge_3_from_edges_34)
        (all_count g_6 f2_26 t2_26 __anonstruct_Graph_4_esize_g_14
        __anonstruct_Graph_4_edges_g_14 (old
        !__anonstruct_Edge_3_existent_0_edges_34) (old
        !__anonstruct_Edge_3_to_edges_34) (old
        !__anonstruct_Edge_3_from_edges_34))))))))))))) } diverges  ->
   'Init:
   try
    begin
    (let i_0 = ref (Unsafe_int32.any_  () ) in
    (let i_0_0 = ref (Unsafe_int32.any_  () ) in
    (let l = ref (Unsafe_int32.any_  () ) in
    try
     begin
     (if
     (#"/home/andrew/astraver/hw3/final/graph.c" 215 8 26#
     (Unsafe_int32.(<)  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 )
      (acc  __anonstruct_Graph_4_esize_g_14 g_6 ) ))
     then
      try
       begin
       (let _jessie_52 = f_2 in
       (let _jessie_53 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
       (let _jessie_54 =
       (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) ) in
       (let _jessie_55 = (shift_  _jessie_53 _jessie_54 ) in
       (upd  __anonstruct_Edge_3_from_edges_34 _jessie_55 _jessie_52 )))));
        begin
        (let _jessie_47 = t_2 in
        (let _jessie_48 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
        (let _jessie_49 =
        (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )
        in
        (let _jessie_50 = (shift_  _jessie_48 _jessie_49 ) in
        (upd  __anonstruct_Edge_3_to_edges_34 _jessie_50 _jessie_47 )))));
         begin
         (let _jessie_42 =
         (#"graph_c.jc" 469 91 103# "expl:Integer cast"
         (Unsafe_int32.of_int (1))) in
         (let _jessie_43 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
         (let _jessie_44 =
         (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )
         in
         (let _jessie_45 = (shift_  _jessie_43 _jessie_44 ) in
         (upd  __anonstruct_Edge_3_existent_0_edges_34 _jessie_45 _jessie_42
          )))));
          begin
          (let _jessie_37 =
          (Unsafe_int32.(+)  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 )
           (#"graph_c.jc" 471 59 71# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) in
          (let _jessie_38 = g_6 in
          (let _jessie_39 = (0) in
          (let _jessie_40 = _jessie_38 in
          (upd  __anonstruct_Graph_4_ecnt_g_14 _jessie_40 _jessie_37 )))));
           begin
           (assert {
           (#"/home/andrew/astraver/hw3/final/graph.c" 222 19 183#
           "expl:Assertion in line 222"
           (forall f2 : int.
            (forall t2 : int.
             (((not ((=) f2 (Int32.to_int f_2))) \/
              (not ((=) t2 (Int32.to_int t_2)))) ->
              ((=)
              (count g_6 f2 t2
              (Int.(-)
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
              (1))
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
              __anonstruct_Graph_4_edges_g_14
              !__anonstruct_Edge_3_existent_0_edges_34
              !__anonstruct_Edge_3_to_edges_34
              !__anonstruct_Edge_3_from_edges_34)
              (count g_6 f2 t2
              (Int.(-)
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
              (1))
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
              __anonstruct_Graph_4_edges_g_14 (at
              !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
              !__anonstruct_Edge_3_to_edges_34 'Init) (at
              !__anonstruct_Edge_3_from_edges_34 'Init))))))) }); () end;
           begin
           (assert {
           (#"/home/andrew/astraver/hw3/final/graph.c" 228 12 232#
           "expl:Assertion in line 228"
           (forall k_7 : int.
            ((((<=) (0) k_7) /\
             (((<) k_7
              (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6)))
             /\
             (not
             ((=) k_7
             (Int.(-)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))))))
             ->
             (forall f2_0 : int.
              (forall t2_0 : int.
               (((not ((=) f2_0 (Int32.to_int f_2))) \/
                (not ((=) t2_0 (Int32.to_int t_2)))) ->
                ((=)
                (count g_6 f2_0 t2_0 k_7 (Int.(+) k_7 (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34)
                (count g_6 f2_0 t2_0 k_7 (Int.(+) k_7 (1))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                !__anonstruct_Edge_3_to_edges_34 'Init) (at
                !__anonstruct_Edge_3_from_edges_34 'Init))))))))) }); () end;
           begin
           (assert {
           (#"/home/andrew/astraver/hw3/final/graph.c" 235 12 211#
           "expl:Assertion in line 235"
           (forall k_8 : int.
            ((((<=) (0) k_8) /\
             ((<) k_8
             (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
             (forall f2_1 : int.
              (forall t2_1 : int.
               (((not ((=) f2_1 (Int32.to_int f_2))) \/
                (not ((=) t2_1 (Int32.to_int t_2)))) ->
                ((=)
                (count g_6 f2_1 t2_1 k_8 (Int.(+) k_8 (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34)
                (count g_6 f2_1 t2_1 k_8 (Int.(+) k_8 (1))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                !__anonstruct_Edge_3_to_edges_34 'Init) (at
                !__anonstruct_Edge_3_from_edges_34 'Init))))))))) }); () end;
           begin
           (i_0 :=
            (#"graph_c.jc" 539 25 37# "expl:Integer cast"
            (Unsafe_int32.of_int (0))));
            'LoopEntry:
            begin
            'LoopEntry:
            'Loop_3:
            loop
            invariant
              { (((#"/home/andrew/astraver/hw3/final/graph.c" 243 31 37#
                  (Int32.(>=) !i_0 (#"graph_c.jc" 546 39 51#
                  "expl:Integer cast" (Int32.of_int (0)))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 244 31 44#
                  (Int32.(<=) !i_0
                  (select __anonstruct_Graph_4_esize_g_14 g_6)))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                  (#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                  ((#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                   ((<=)
                   (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6)
                   (0)))
                  /\
                  (#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                  ((#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                   ((>=)
                   (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6)
                   (0)))
                  /\
                  (#"/home/andrew/astraver/hw3/final/graph.c" 245 31 40#
                  ((=) true true)))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 246 31 69#
                  (if
                   ((<=) (0)
                   (Int.(-)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6)) (1))) then
                   (((<=)
                    (offset_min __anonstruct_Edge_3_edges_34_alloc_table
                    (select __anonstruct_Graph_4_edges_g_14 g_6)) (0))
                   /\
                   (((>=)
                    (offset_max __anonstruct_Edge_3_edges_34_alloc_table
                    (select __anonstruct_Graph_4_edges_g_14 g_6))
                    (Int.(-)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))
                   /\
                   (forall __framac_tmp6 : int.
                    ((((<=) (0) __framac_tmp6) /\
                     ((<=) __framac_tmp6
                     (Int.(-)
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))) ->
                     ((=) true true))))) else ((=) true true)))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 247 31 45#
                  (graph_valid g_6
                  __anonstruct_Vertex_2_vertices_33_alloc_table
                  __anonstruct_Edge_3_edges_34_alloc_table
                  __anonstruct_Graph_4_esize_g_14
                  !__anonstruct_Graph_4_ecnt_g_14
                  __anonstruct_Graph_4_edges_g_14
                  __anonstruct_Graph_4_vsize_g_14
                  __anonstruct_Graph_4_vertices_g_14
                  !__anonstruct_Edge_3_existent_0_edges_34
                  !__anonstruct_Edge_3_to_edges_34
                  !__anonstruct_Edge_3_from_edges_34
                  __anonstruct_Vertex_2_existent_vertices_33))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 249 31 180#
                  (forall j : int.
                   ((((<=) (0) j) /\
                    (((<) j (Int32.to_int !i_0)) /\
                    (not
                    ((=) j
                    (Int.(-)
                    (Int32.to_int
                    (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1)))))) ->
                    ((Int32.(=)
                     (select (at !__anonstruct_Edge_3_from_edges_34 'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))
                     (select !__anonstruct_Edge_3_from_edges_34
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j)))
                    /\
                    ((Int32.(=)
                     (select (at !__anonstruct_Edge_3_to_edges_34 'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))
                     (select !__anonstruct_Edge_3_to_edges_34
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j)))
                    /\
                    (Int32.(=)
                    (select (at !__anonstruct_Edge_3_existent_0_edges_34
                    'Init)
                    (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))
                    (select !__anonstruct_Edge_3_existent_0_edges_34
                    (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j))))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 253 31 200#
                  (forall j_0 : int.
                   ((((<=) (0) j_0) /\
                    (((<) j_0 (Int32.to_int !i_0)) /\
                    (not
                    ((=) j_0
                    (Int.(-)
                    (Int32.to_int
                    (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1)))))) ->
                    ((=)
                    (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) j_0
                    (Int.(+) j_0 (1)) __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init))
                    (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) j_0
                    (Int.(+) j_0 (1)) __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34)))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 260 31 164#
                  (((<) (Int32.to_int !i_0)
                   (Int.(-)
                   (Int32.to_int
                   (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))) ->
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init))
                   (Int.(+)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init))
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 263 31 167#
                  (((<) (Int32.to_int !i_0)
                   (Int.(-)
                   (Int32.to_int
                   (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))) ->
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)
                   (Int.(+)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 266 31 125#
                  ((Int32.(<) !i_0
                   (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) ->
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init)))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 269 31 165#
                  (((>=) (Int32.to_int !i_0)
                   (Int.(-)
                   (Int32.to_int
                   (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))) ->
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init))
                   (Int.(+)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init))
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 272 31 168#
                  (((>=) (Int32.to_int !i_0)
                   (Int.(-)
                   (Int32.to_int
                   (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))) ->
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)
                   (Int.(+)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 275 31 132#
                  ((Int32.(>=) !i_0
                   (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) ->
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_34
                   !__anonstruct_Edge_3_to_edges_34
                   !__anonstruct_Edge_3_from_edges_34)
                   (Int.(+)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                   !__anonstruct_Edge_3_to_edges_34 'Init) (at
                   !__anonstruct_Edge_3_from_edges_34 'Init)) (1)))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 278 31 358#
                  (forall j_1 : int.
                   ((((<=) (0) j_1) /\
                    ((<=) j_1 (Int.(-) (Int32.to_int !i_0) (1)))) ->
                    (forall f2_7 : int.
                     (forall t2_7 : int.
                      (((not ((=) f2_7 (Int32.to_int f_2))) \/
                       (not ((=) t2_7 (Int32.to_int t_2)))) ->
                       ((=)
                       (count g_6 f2_7 t2_7 (0) (Int.(+) j_1 (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init))
                       (Int.(+)
                       (count g_6 f2_7 t2_7 (0) j_1
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init))
                       (count g_6 f2_7 t2_7 j_1 (Int.(+) j_1 (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init))))))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 285 31 379#
                  (forall j_2 : int.
                   ((((<=) (0) j_2) /\
                    (((>=) j_2 (Int.(-) (Int32.to_int !i_0) (1))) /\
                    ((<) j_2
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))))) ->
                    (forall f2_8 : int.
                     (forall t2_8 : int.
                      (((not ((=) f2_8 (Int32.to_int f_2))) \/
                       (not ((=) t2_8 (Int32.to_int t_2)))) ->
                       ((=)
                       (count g_6 f2_8 t2_8 (0) (Int.(+) j_2 (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init))
                       (Int.(+)
                       (count g_6 f2_8 t2_8 (0) j_2
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init))
                       (count g_6 f2_8 t2_8 j_2 (Int.(+) j_2 (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init))))))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 292 31 361#
                  (forall j_3 : int.
                   ((((<=) (0) j_3) /\
                    ((<=) j_3 (Int.(-) (Int32.to_int !i_0) (1)))) ->
                    (forall f2_9 : int.
                     (forall t2_9 : int.
                      (((not ((=) f2_9 (Int32.to_int f_2))) \/
                       (not ((=) t2_9 (Int32.to_int t_2)))) ->
                       ((=)
                       (count g_6 f2_9 t2_9 (0) (Int.(+) j_3 (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (Int.(+)
                       (count g_6 f2_9 t2_9 (0) j_3
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (count g_6 f2_9 t2_9 j_3 (Int.(+) j_3 (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)))))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 299 31 382#
                  (forall j_4 : int.
                   ((((<=) (0) j_4) /\
                    (((>=) j_4 (Int.(-) (Int32.to_int !i_0) (1))) /\
                    ((<) j_4
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))))) ->
                    (forall f2_10 : int.
                     (forall t2_10 : int.
                      (((not ((=) f2_10 (Int32.to_int f_2))) \/
                       (not ((=) t2_10 (Int32.to_int t_2)))) ->
                       ((=)
                       (count g_6 f2_10 t2_10 (0) (Int.(+) j_4 (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (Int.(+)
                       (count g_6 f2_10 t2_10 (0) j_4
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (count g_6 f2_10 t2_10 j_4 (Int.(+) j_4 (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)))))))))
                 &&
                 ((#"/home/andrew/astraver/hw3/final/graph.c" 306 31 329#
                  (forall j_5 : int.
                   ((((<=) (0) j_5) /\
                    ((<=) j_5 (Int.(-) (Int32.to_int !i_0) (1)))) ->
                    (forall f2_11 : int.
                     (forall t2_11 : int.
                      (((not ((=) f2_11 (Int32.to_int f_2))) \/
                       (not ((=) t2_11 (Int32.to_int t_2)))) ->
                       ((=)
                       (count g_6 f2_11 t2_11 j_5 (Int.(+) j_5 (1))
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (count g_6 f2_11 t2_11 j_5 (Int.(+) j_5 (1))
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                       !__anonstruct_Edge_3_to_edges_34 'Init) (at
                       !__anonstruct_Edge_3_from_edges_34 'Init)))))))))
                 &&
                 (#"/home/andrew/astraver/hw3/final/graph.c" 327 31 317#
                 (forall j_6 : int.
                  ((((<=) (0) j_6) /\ ((<=) j_6 (Int32.to_int !i_0))) ->
                   (forall f2_12 : int.
                    (forall t2_12 : int.
                     (((not ((=) f2_12 (Int32.to_int f_2))) \/
                      (not ((=) t2_12 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_12 t2_12 (0) j_6
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_34
                      !__anonstruct_Edge_3_to_edges_34
                      !__anonstruct_Edge_3_from_edges_34)
                      (count g_6 f2_12 t2_12 (0) j_6
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                      !__anonstruct_Edge_3_to_edges_34 'Init) (at
                      !__anonstruct_Edge_3_from_edges_34 'Init)))))))))))))))))))))))))))
                /\
                (#"graph_c.jc" 541 9 21314#
                ((#"graph_c.jc" 541 9 21314#
                 ((#"graph_c.jc" 541 9 21314#
                  ((#"graph_c.jc" 541 9 21314# "expl:Assigns clause"
                   (not_assigns __anonstruct_Edge_3_edges_34_alloc_table
                   __anonstruct_Edge_3_edges_34_alloc_table (at
                   !__anonstruct_Edge_3_from_edges_34 'Loop_3)
                   !__anonstruct_Edge_3_from_edges_34 pset_empty))
                  /\
                  (#"graph_c.jc" 541 9 21314# "expl:Assigns clause"
                  (not_assigns __anonstruct_Edge_3_edges_34_alloc_table
                  __anonstruct_Edge_3_edges_34_alloc_table (at
                  !__anonstruct_Edge_3_to_edges_34 'Loop_3)
                  !__anonstruct_Edge_3_to_edges_34 pset_empty))))
                 /\
                 (#"graph_c.jc" 541 9 21314# "expl:Assigns clause"
                 (not_assigns __anonstruct_Edge_3_edges_34_alloc_table
                 __anonstruct_Edge_3_edges_34_alloc_table (at
                 !__anonstruct_Edge_3_existent_0_edges_34 'Loop_3)
                 !__anonstruct_Edge_3_existent_0_edges_34 pset_empty))))
                /\
                (#"graph_c.jc" 541 9 21314# "expl:Assigns clause"
                (not_assigns __anonstruct_Graph_4_g_14_alloc_table
                __anonstruct_Graph_4_g_14_alloc_table (at
                !__anonstruct_Graph_4_ecnt_g_14 'Loop_3)
                !__anonstruct_Graph_4_ecnt_g_14 pset_empty))))) } 
             begin
             any unit requires { true } ensures { true } ;
              try
               begin
               'LoopCurrent:
               begin
               'LoopCurrent:
               (if
               (#"/home/andrew/astraver/hw3/final/graph.c" 336 19 31#
               (Unsafe_int32.(<)  !i_0
                (acc  __anonstruct_Graph_4_esize_g_14 g_6 ) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
                begin
                (i_0 :=
                 (Unsafe_int32.(+)  !i_0
                  (#"graph_c.jc" 739 63 75# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ));
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 338 27 144#
                 "expl:Assertion in line 338"
                 (forall f2_2 : int.
                  (forall t2_2 : int.
                   (((not ((=) f2_2 (Int32.to_int f_2))) \/
                    (not ((=) t2_2 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_2 t2_2 (Int.(-) (Int32.to_int !i_0) (1))
                    (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34)
                    (count g_6 f2_2 t2_2 (Int.(-) (Int32.to_int !i_0) (1))
                    (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init))))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 339 27 176#
                 "expl:Assertion in line 339"
                 (forall f2_3 : int.
                  (forall t2_3 : int.
                   (((not ((=) f2_3 (Int32.to_int f_2))) \/
                    (not ((=) t2_3 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_3 t2_3 (0) (Int32.to_int !i_0)
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34)
                    (Int.(+)
                    (count g_6 f2_3 t2_3 (0)
                    (Int.(-) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34)
                    (count g_6 f2_3 t2_3 (Int.(-) (Int32.to_int !i_0) (1))
                    (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34))))))) }); () end;
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 340 27 173#
                 "expl:Assertion in line 340"
                 (forall f2_4 : int.
                  (forall t2_4 : int.
                   (((not ((=) f2_4 (Int32.to_int f_2))) \/
                    (not ((=) t2_4 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_4 t2_4 (0) (Int32.to_int !i_0)
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init))
                    (Int.(+)
                    (count g_6 f2_4 t2_4 (0)
                    (Int.(-) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init))
                    (count g_6 f2_4 t2_4 (Int.(-) (Int32.to_int !i_0) (1))
                    (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init)))))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 341 27 144#
                 "expl:Assertion in line 341"
                 (forall f2_5 : int.
                  (forall t2_5 : int.
                   (((not ((=) f2_5 (Int32.to_int f_2))) \/
                    (not ((=) t2_5 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_5 t2_5 (0)
                    (Int.(-) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34)
                    (count g_6 f2_5 t2_5 (0)
                    (Int.(-) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init))))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/andrew/astraver/hw3/final/graph.c" 342 27 174#
                 "expl:Assertion in line 342"
                 (forall f2_6 : int.
                  (forall t2_6 : int.
                   (((not ((=) f2_6 (Int32.to_int f_2))) \/
                    (not ((=) t2_6 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_6 t2_6 (0) (Int32.to_int !i_0)
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34
                    !__anonstruct_Edge_3_to_edges_34
                    !__anonstruct_Edge_3_from_edges_34)
                    (Int.(+)
                    (count g_6 f2_6 t2_6 (0)
                    (Int.(-) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init))
                    (count g_6 f2_6 t2_6 (Int.(-) (Int32.to_int !i_0) (1))
                    (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                    !__anonstruct_Edge_3_to_edges_34 'Init) (at
                    !__anonstruct_Edge_3_from_edges_34 'Init)))))))) }); ()
                 end end end; (raise (Loop_continue_exc ())) end with
               Loop_continue_exc _jessie_11 -> () end end end;
             (raise (Goto_while_0_break_0_exc ())) end end end end end end
       with Goto_while_0_break_0_exc _jessie_6 ->
       'While_0_break_0:
       'While_0_break_0: begin (); (raise (Return_label_exc ())) end end
     else ());
      try
       begin
       (i_0_0 :=
        (#"graph_c.jc" 875 28 40# "expl:Integer cast"
        (Unsafe_int32.of_int (0))));
        'LoopEntry:
        begin
        'LoopEntry:
        'Loop_4:
        loop
        invariant
          { ((#"/home/andrew/astraver/hw3/final/graph.c" 350 23 29#
             (Int32.(>=) !i_0_0 (#"graph_c.jc" 879 41 53# "expl:Integer cast"
             (Int32.of_int (0)))))
            &&
            ((#"/home/andrew/astraver/hw3/final/graph.c" 351 23 35#
             (Int32.(<=) !i_0_0 (select !__anonstruct_Graph_4_ecnt_g_14 g_6)))
            &&
            ((#"/home/andrew/astraver/hw3/final/graph.c" 353 23 104#
             (exists j_15 : int.
              (((<=) (0) j_15) /\
              (((<) j_15
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)))
              /\
              (Int32.(=)
              (select !__anonstruct_Edge_3_existent_0_edges_34
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j_15))
              (#"graph_c.jc" 887 37 49# "expl:Integer cast" (Int32.of_int
              (0))))))))
            &&
            ((#"/home/andrew/astraver/hw3/final/graph.c" 356 23 99#
             (forall j_16 : int.
              ((((<=) (0) j_16) /\ ((<) j_16 (Int32.to_int !i_0_0))) ->
               (not
               (Int32.(=)
               (select !__anonstruct_Edge_3_existent_0_edges_34
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) j_16))
               (#"graph_c.jc" 893 40 52# "expl:Integer cast" (Int32.of_int
               (0))))))))
            &&
            ((#"/home/andrew/astraver/hw3/final/graph.c" 359 23 37#
             (graph_valid g_6 __anonstruct_Vertex_2_vertices_33_alloc_table
             __anonstruct_Edge_3_edges_34_alloc_table
             __anonstruct_Graph_4_esize_g_14 !__anonstruct_Graph_4_ecnt_g_14
             __anonstruct_Graph_4_edges_g_14 __anonstruct_Graph_4_vsize_g_14
             __anonstruct_Graph_4_vertices_g_14
             !__anonstruct_Edge_3_existent_0_edges_34
             !__anonstruct_Edge_3_to_edges_34
             !__anonstruct_Edge_3_from_edges_34
             __anonstruct_Vertex_2_existent_vertices_33))
            &&
            ((#"/home/andrew/astraver/hw3/final/graph.c" 361 23 151#
             (forall f2_24 : int.
              (forall t2_24 : int.
               (((not ((=) f2_24 (Int32.to_int f_2))) \/
                (not ((=) t2_24 (Int32.to_int t_2)))) ->
                ((=)
                (all_count g_6 f2_24 t2_24 __anonstruct_Graph_4_esize_g_14
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34)
                (all_count g_6 f2_24 t2_24 __anonstruct_Graph_4_esize_g_14
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                !__anonstruct_Edge_3_to_edges_34 'Init) (at
                !__anonstruct_Edge_3_from_edges_34 'Init)))))))
            &&
            (#"/home/andrew/astraver/hw3/final/graph.c" 365 23 118#
            (forall f2_25 : int.
             (forall t2_25 : int.
              (forall m_12 : int.
               (forall n_12 : int.
                ((=)
                (count g_6 f2_25 t2_25 m_12 n_12
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_34
                !__anonstruct_Edge_3_to_edges_34
                !__anonstruct_Edge_3_from_edges_34)
                (count g_6 f2_25 t2_25 m_12 n_12
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_34 'Init) (at
                !__anonstruct_Edge_3_to_edges_34 'Init) (at
                !__anonstruct_Edge_3_from_edges_34 'Init)))))))))))))) } 
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           'LoopCurrent:
           begin
           'LoopCurrent:
           (if
           (#"/home/andrew/astraver/hw3/final/graph.c" 371 20 31#
           (Unsafe_int32.(<)  !i_0_0
            (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )) then ()
           else (raise (Goto_while_0_break_0_0_exc ())));
            'U__Pre1:
            'U__Pre1:
            (if
            (#"/home/andrew/astraver/hw3/final/graph.c" 373 12 33#
            (Bool.notb 
             (Unsafe_int32.(<>) 
              (acc  !__anonstruct_Edge_3_existent_0_edges_34
               (shift_  (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
                (Unsafe_int32.to_int  !i_0_0 ) ) )
              (#"graph_c.jc" 920 46 58# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ) ))
            then
             try
              begin
              (let _jessie_69 = f_2 in
              (let _jessie_70 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
              in
              (let _jessie_71 = (Unsafe_int32.to_int  !i_0_0 ) in
              (let _jessie_72 = (shift_  _jessie_70 _jessie_71 ) in
              (upd  __anonstruct_Edge_3_from_edges_34 _jessie_72 _jessie_69 )))));
               begin
               (let _jessie_64 = t_2 in
               (let _jessie_65 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
               in
               (let _jessie_66 = (Unsafe_int32.to_int  !i_0_0 ) in
               (let _jessie_67 = (shift_  _jessie_65 _jessie_66 ) in
               (upd  __anonstruct_Edge_3_to_edges_34 _jessie_67 _jessie_64 )))));
                begin
                (let _jessie_59 =
                (#"graph_c.jc" 926 85 97# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) in
                (let _jessie_60 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
                in
                (let _jessie_61 = (Unsafe_int32.to_int  !i_0_0 ) in
                (let _jessie_62 = (shift_  _jessie_60 _jessie_61 ) in
                (upd  __anonstruct_Edge_3_existent_0_edges_34 _jessie_62
                 _jessie_59 )))));
                 begin
                 (l :=
                  (#"graph_c.jc" 927 45 57# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))));
                  'LoopEntry:
                  begin
                  'LoopEntry:
                  'Loop_5:
                  loop
                  invariant
                    { (((#"/home/andrew/astraver/hw3/final/graph.c" 381 35 41#
                        (Int32.(>=) !l (#"graph_c.jc" 934 58 70#
                        "expl:Integer cast" (Int32.of_int (0)))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 382 35 48#
                        (Int32.(<=) !l
                        (select __anonstruct_Graph_4_esize_g_14 g_6)))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                        (#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                        ((#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                         ((<=)
                         (offset_min __anonstruct_Graph_4_g_14_alloc_table
                         g_6) (0)))
                        /\
                        (#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                        ((#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                         ((>=)
                         (offset_max __anonstruct_Graph_4_g_14_alloc_table
                         g_6) (0)))
                        /\
                        (#"/home/andrew/astraver/hw3/final/graph.c" 383 35 44#
                        ((=) true true)))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 384 35 73#
                        (if
                         ((<=) (0)
                         (Int.(-)
                         (Int32.to_int
                         (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))
                         then
                         (((<=)
                          (offset_min
                          __anonstruct_Edge_3_edges_34_alloc_table
                          (select __anonstruct_Graph_4_edges_g_14 g_6)) (0))
                         /\
                         (((>=)
                          (offset_max
                          __anonstruct_Edge_3_edges_34_alloc_table
                          (select __anonstruct_Graph_4_edges_g_14 g_6))
                          (Int.(-)
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6)) (1)))
                         /\
                         (forall __framac_tmp8 : int.
                          ((((<=) (0) __framac_tmp8) /\
                           ((<=) __framac_tmp8
                           (Int.(-)
                           (Int32.to_int
                           (select __anonstruct_Graph_4_esize_g_14 g_6)) (1))))
                           -> ((=) true true))))) else ((=) true true)))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 385 35 49#
                        (graph_valid g_6
                        __anonstruct_Vertex_2_vertices_33_alloc_table
                        __anonstruct_Edge_3_edges_34_alloc_table
                        __anonstruct_Graph_4_esize_g_14
                        !__anonstruct_Graph_4_ecnt_g_14
                        __anonstruct_Graph_4_edges_g_14
                        __anonstruct_Graph_4_vsize_g_14
                        __anonstruct_Graph_4_vertices_g_14
                        !__anonstruct_Edge_3_existent_0_edges_34
                        !__anonstruct_Edge_3_to_edges_34
                        !__anonstruct_Edge_3_from_edges_34
                        __anonstruct_Vertex_2_existent_vertices_33))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 387 35 183#
                        (forall j_7 : int.
                         ((((<=) (0) j_7) /\
                          (((<) j_7 (Int32.to_int !l)) /\
                          (not ((=) j_7 (Int32.to_int !i_0_0))))) ->
                          ((Int32.(=)
                           (select (at !__anonstruct_Edge_3_from_edges_34
                           'U__Pre1)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) j_7))
                           (select !__anonstruct_Edge_3_from_edges_34
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) j_7)))
                          /\
                          ((Int32.(=)
                           (select (at !__anonstruct_Edge_3_to_edges_34
                           'U__Pre1)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) j_7))
                           (select !__anonstruct_Edge_3_to_edges_34
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) j_7)))
                          /\
                          (Int32.(=)
                          (select (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          j_7))
                          (select !__anonstruct_Edge_3_existent_0_edges_34
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          j_7))))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 391 35 203#
                        (forall j_8 : int.
                         ((((<=) (0) j_8) /\
                          (((<) j_8 (Int32.to_int !l)) /\
                          (not ((=) j_8 (Int32.to_int !i_0_0))))) ->
                          ((=)
                          (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                          j_8 (Int.(+) j_8 (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                          (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                          j_8 (Int.(+) j_8 (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34)))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 395 35 168#
                        (((<=) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                         ((=)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14 (at
                         !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                         (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                         !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                         (Int.(+)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         (at !__anonstruct_Edge_3_existent_0_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                         'U__Pre1))
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                         (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14 (at
                         !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                         (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                         !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 398 35 168#
                        (((<=) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                         ((=)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)
                         (Int.(+)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                         (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 401 35 132#
                        ((Int32.(<=) !l !i_0_0) ->
                         ((=)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         (at !__anonstruct_Edge_3_existent_0_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                         'U__Pre1))
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 404 35 169#
                        (((>) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                         ((=)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14 (at
                         !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                         (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                         !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                         (Int.(+)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         (at !__anonstruct_Edge_3_existent_0_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                         'U__Pre1))
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                         (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14 (at
                         !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                         (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                         !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 407 35 173#
                        (((>) (Int32.to_int !l)
                         (Int.(-) (Int32.to_int !i_0_0) (1))) ->
                         ((=)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)
                         (Int.(+)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                         (Int32.to_int !l) (Int.(+) (Int32.to_int !l) (1))
                         __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 410 35 138#
                        ((Int32.(>) !l !i_0_0) ->
                         ((=)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_34
                         !__anonstruct_Edge_3_to_edges_34
                         !__anonstruct_Edge_3_from_edges_34)
                         (Int.(+)
                         (count g_6 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                         (Int32.to_int !l) __anonstruct_Graph_4_edges_g_14
                         (at !__anonstruct_Edge_3_existent_0_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                         'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                         'U__Pre1)) (1)))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 413 35 365#
                        (forall j_9 : int.
                         ((((<=) (0) j_9) /\
                          ((<=) j_9 (Int.(-) (Int32.to_int !l) (1)))) ->
                          (forall f2_18 : int.
                           (forall t2_18 : int.
                            (((not ((=) f2_18 (Int32.to_int f_2))) \/
                             (not ((=) t2_18 (Int32.to_int t_2)))) ->
                             ((=)
                             (count g_6 f2_18 t2_18 (0) (Int.(+) j_9 (1))
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1))
                             (Int.(+)
                             (count g_6 f2_18 t2_18 (0) j_9
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1))
                             (count g_6 f2_18 t2_18 j_9 (Int.(+) j_9 (1))
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1))))))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 420 35 406#
                        (forall j_10 : int.
                         ((((<=) (0) j_10) /\
                          (((>=) j_10 (Int.(-) (Int32.to_int !l) (1))) /\
                          ((<) j_10
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6))))) ->
                          (forall f2_19 : int.
                           (forall t2_19 : int.
                            (((not ((=) f2_19 (Int32.to_int f_2))) \/
                             (not ((=) t2_19 (Int32.to_int t_2)))) ->
                             ((=)
                             (count g_6 f2_19 t2_19 (0) (Int.(+) j_10 (1))
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1))
                             (Int.(+)
                             (count g_6 f2_19 t2_19 (0) j_10
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1))
                             (count g_6 f2_19 t2_19 j_10 (Int.(+) j_10 (1))
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1))))))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 427 35 385#
                        (forall j_11 : int.
                         ((((<=) (0) j_11) /\
                          ((<=) j_11 (Int.(-) (Int32.to_int !l) (1)))) ->
                          (forall f2_20 : int.
                           (forall t2_20 : int.
                            (((not ((=) f2_20 (Int32.to_int f_2))) \/
                             (not ((=) t2_20 (Int32.to_int t_2)))) ->
                             ((=)
                             (count g_6 f2_20 t2_20 (0) (Int.(+) j_11 (1))
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)
                             (Int.(+)
                             (count g_6 f2_20 t2_20 (0) j_11
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)
                             (count g_6 f2_20 t2_20 j_11 (Int.(+) j_11 (1))
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)))))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 434 35 406#
                        (forall j_12 : int.
                         ((((<=) (0) j_12) /\
                          (((>=) j_12 (Int.(-) (Int32.to_int !l) (1))) /\
                          ((<) j_12
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6))))) ->
                          (forall f2_21 : int.
                           (forall t2_21 : int.
                            (((not ((=) f2_21 (Int32.to_int f_2))) \/
                             (not ((=) t2_21 (Int32.to_int t_2)))) ->
                             ((=)
                             (count g_6 f2_21 t2_21 (0) (Int.(+) j_12 (1))
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)
                             (Int.(+)
                             (count g_6 f2_21 t2_21 (0) j_12
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)
                             (count g_6 f2_21 t2_21 j_12 (Int.(+) j_12 (1))
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)))))))))
                       &&
                       ((#"/home/andrew/astraver/hw3/final/graph.c" 441 35 354#
                        (forall j_13 : int.
                         ((((<=) (0) j_13) /\
                          ((<=) j_13 (Int.(-) (Int32.to_int !l) (1)))) ->
                          (forall f2_22 : int.
                           (forall t2_22 : int.
                            (((not ((=) f2_22 (Int32.to_int f_2))) \/
                             (not ((=) t2_22 (Int32.to_int t_2)))) ->
                             ((=)
                             (count g_6 f2_22 t2_22 j_13 (Int.(+) j_13 (1))
                             __anonstruct_Graph_4_edges_g_14
                             !__anonstruct_Edge_3_existent_0_edges_34
                             !__anonstruct_Edge_3_to_edges_34
                             !__anonstruct_Edge_3_from_edges_34)
                             (count g_6 f2_22 t2_22 j_13 (Int.(+) j_13 (1))
                             __anonstruct_Graph_4_edges_g_14 (at
                             !__anonstruct_Edge_3_existent_0_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                             'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                             'U__Pre1)))))))))
                       &&
                       (#"/home/andrew/astraver/hw3/final/graph.c" 448 35 342#
                       (forall j_14 : int.
                        ((((<=) (0) j_14) /\ ((<=) j_14 (Int32.to_int !l)))
                         ->
                         (forall f2_23 : int.
                          (forall t2_23 : int.
                           (((not ((=) f2_23 (Int32.to_int f_2))) \/
                            (not ((=) t2_23 (Int32.to_int t_2)))) ->
                            ((=)
                            (count g_6 f2_23 t2_23 (0) j_14
                            __anonstruct_Graph_4_edges_g_14
                            !__anonstruct_Edge_3_existent_0_edges_34
                            !__anonstruct_Edge_3_to_edges_34
                            !__anonstruct_Edge_3_from_edges_34)
                            (count g_6 f2_23 t2_23 (0) j_14
                            __anonstruct_Graph_4_edges_g_14 (at
                            !__anonstruct_Edge_3_existent_0_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_to_edges_34
                            'U__Pre1) (at !__anonstruct_Edge_3_from_edges_34
                            'U__Pre1)))))))))))))))))))))))))))
                      /\
                      (#"graph_c.jc" 929 30 34665#
                      ((#"graph_c.jc" 929 30 34665#
                       ((#"graph_c.jc" 929 30 34665#
                        ((#"graph_c.jc" 929 30 34665# "expl:Assigns clause"
                         (not_assigns
                         __anonstruct_Edge_3_edges_34_alloc_table
                         __anonstruct_Edge_3_edges_34_alloc_table (at
                         !__anonstruct_Edge_3_from_edges_34 'Loop_5)
                         !__anonstruct_Edge_3_from_edges_34 pset_empty))
                        /\
                        (#"graph_c.jc" 929 30 34665# "expl:Assigns clause"
                        (not_assigns __anonstruct_Edge_3_edges_34_alloc_table
                        __anonstruct_Edge_3_edges_34_alloc_table (at
                        !__anonstruct_Edge_3_to_edges_34 'Loop_5)
                        !__anonstruct_Edge_3_to_edges_34 pset_empty))))
                       /\
                       (#"graph_c.jc" 929 30 34665# "expl:Assigns clause"
                       (not_assigns __anonstruct_Edge_3_edges_34_alloc_table
                       __anonstruct_Edge_3_edges_34_alloc_table (at
                       !__anonstruct_Edge_3_existent_0_edges_34 'Loop_5)
                       !__anonstruct_Edge_3_existent_0_edges_34 pset_empty))))
                      /\
                      (#"graph_c.jc" 929 30 34665# "expl:Assigns clause"
                      (not_assigns __anonstruct_Graph_4_g_14_alloc_table
                      __anonstruct_Graph_4_g_14_alloc_table (at
                      !__anonstruct_Graph_4_ecnt_g_14 'Loop_5)
                      !__anonstruct_Graph_4_ecnt_g_14 pset_empty))))) } 
                    
                   begin
                   any unit requires { true } ensures { true } ;
                    try
                     begin
                     'LoopCurrent:
                     begin
                     'LoopCurrent:
                     (if
                     (#"/home/andrew/astraver/hw3/final/graph.c" 458 23 35#
                     (Unsafe_int32.(<)  !l
                      (acc  __anonstruct_Graph_4_esize_g_14 g_6 ) )) 
                     then () else (raise (Goto_while_1_break_exc ())));
                      begin
                      (l :=
                       (Unsafe_int32.(+)  !l
                        (#"graph_c.jc" 1255 67 79# "expl:Integer cast"
                        (Unsafe_int32.of_int (1))) ));
                       begin
                       (assert {
                       (#"/home/andrew/astraver/hw3/final/graph.c" 460 31 149#
                       "expl:Assertion in line 460"
                       (forall f2_13 : int.
                        (forall t2_13 : int.
                         (((not ((=) f2_13 (Int32.to_int f_2))) \/
                          (not ((=) t2_13 (Int32.to_int t_2)))) ->
                          ((=)
                          (count g_6 f2_13 t2_13
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34)
                          (count g_6 f2_13 t2_13
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1)))))))
                       }); () end;
                       begin
                       (assert {
                       (#"/home/andrew/astraver/hw3/final/graph.c" 461 31 180#
                       "expl:Assertion in line 461"
                       (forall f2_14 : int.
                        (forall t2_14 : int.
                         (((not ((=) f2_14 (Int32.to_int f_2))) \/
                          (not ((=) t2_14 (Int32.to_int t_2)))) ->
                          ((=)
                          (count g_6 f2_14 t2_14 (0) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34)
                          (Int.(+)
                          (count g_6 f2_14 t2_14 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34)
                          (count g_6 f2_14 t2_14
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34))))))) }); ()
                       end;
                       begin
                       (assert {
                       (#"/home/andrew/astraver/hw3/final/graph.c" 462 31 180#
                       "expl:Assertion in line 462"
                       (forall f2_15 : int.
                        (forall t2_15 : int.
                         (((not ((=) f2_15 (Int32.to_int f_2))) \/
                          (not ((=) t2_15 (Int32.to_int t_2)))) ->
                          ((=)
                          (count g_6 f2_15 t2_15 (0) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                          (Int.(+)
                          (count g_6 f2_15 t2_15 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                          (count g_6 f2_15 t2_15
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))))
                       }); () end;
                       begin
                       (assert {
                       (#"/home/andrew/astraver/hw3/final/graph.c" 463 31 149#
                       "expl:Assertion in line 463"
                       (forall f2_16 : int.
                        (forall t2_16 : int.
                         (((not ((=) f2_16 (Int32.to_int f_2))) \/
                          (not ((=) t2_16 (Int32.to_int t_2)))) ->
                          ((=)
                          (count g_6 f2_16 t2_16 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34)
                          (count g_6 f2_16 t2_16 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1)))))))
                       }); () end;
                       begin
                       (assert {
                       (#"/home/andrew/astraver/hw3/final/graph.c" 464 31 180#
                       "expl:Assertion in line 464"
                       (forall f2_17 : int.
                        (forall t2_17 : int.
                         (((not ((=) f2_17 (Int32.to_int f_2))) \/
                          (not ((=) t2_17 (Int32.to_int t_2)))) ->
                          ((=)
                          (count g_6 f2_17 t2_17 (0) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_34
                          !__anonstruct_Edge_3_to_edges_34
                          !__anonstruct_Edge_3_from_edges_34)
                          (Int.(+)
                          (count g_6 f2_17 t2_17 (0)
                          (Int.(-) (Int32.to_int !l) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1))
                          (count g_6 f2_17 t2_17
                          (Int.(-) (Int32.to_int !l) (1)) (Int32.to_int !l)
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1)
                          (at !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
                          !__anonstruct_Edge_3_from_edges_34 'U__Pre1))))))))
                       }); () end end end; (raise (Loop_continue_exc ())) end
                     with Loop_continue_exc _jessie_13 -> () end end end;
                   (raise (Goto_while_1_break_exc ())) end end end end end
              with Goto_while_1_break_exc _jessie_7 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               (assert {
               (#"/home/andrew/astraver/hw3/final/graph.c" 467 23 75#
               "expl:Assertion in line 467"
               ((=)
               (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
               __anonstruct_Graph_4_esize_g_14
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_34
               !__anonstruct_Edge_3_to_edges_34
               !__anonstruct_Edge_3_from_edges_34)
               (Int.(+)
               (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
               __anonstruct_Graph_4_esize_g_14
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_34 'U__Pre1) (at
               !__anonstruct_Edge_3_to_edges_34 'U__Pre1) (at
               !__anonstruct_Edge_3_from_edges_34 'U__Pre1)) (1)))) }); ()
               end; (raise (Return_label_exc ())) end end else ());
            (i_0_0 :=
             (Unsafe_int32.(+)  !i_0_0
              (#"graph_c.jc" 1415 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end;
         (raise (Goto_while_0_break_0_0_exc ())) end end with
       Goto_while_0_break_0_0_exc _jessie_8 ->
       'While_0_break_0_0: 'While_0_break_0_0: () end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_9 ->
     'Return_label: 'Return_label: (raise Return) end))); (raise Return) end
    with Return -> () end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_count_0

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val count_0
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0 : Int32.t) 
    (t_0 : Int32.t) 
     (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
      __anonstruct_Vertex_2)) 
      (__anonstruct_Graph_4_g_0_13_alloc_table : (alloc_table
       __anonstruct_Graph_4)) 
       (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
        __anonstruct_Edge_3)) 
        (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_0_13 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_0_13 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_32 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_32 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_32 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : Int32.t
                  requires { true }
                  ensures {
                    (#"/home/andrew/astraver/hw3/final/graph.c" 169 12 41#
                    "expl:Ensures clause"
                    ((=) (Int32.to_int result)
                    (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
                    __anonstruct_Graph_4_esize_g_0_13
                    __anonstruct_Graph_4_edges_g_0_13
                    __anonstruct_Edge_3_existent_0_edges_32
                    __anonstruct_Edge_3_to_edges_32
                    __anonstruct_Edge_3_from_edges_32))) }
  
end

module Function_count_0_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_LF__Axiomatic__l_count_empty_tail 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val count_0
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0 : Int32.t) 
    (t_0 : Int32.t) 
     (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
      __anonstruct_Vertex_2)) 
      (__anonstruct_Graph_4_g_0_13_alloc_table : (alloc_table
       __anonstruct_Graph_4)) 
       (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
        __anonstruct_Edge_3)) 
        (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_0_13 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_0_13 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_32 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_32 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_32 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : Int32.t
                  requires {
                    ("expl:Internal"
                    (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                    ((#"graph_c.jc" 301 12 809# "expl:Requires clause"
                     _LF__Predicate__l_count_empty_tail)
                    /\
                    (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 164 13 22#
                     "expl:Requires clause"
                     (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                     ((#"graph_c.jc" 301 12 809# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_0_13_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                     ((#"graph_c.jc" 301 12 809# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_0_13_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 164 26 40#
                     "expl:Requires clause"
                     (graph_valid g_0_0
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_0_13
                     __anonstruct_Graph_4_ecnt_g_0_13
                     __anonstruct_Graph_4_edges_g_0_13
                     __anonstruct_Graph_4_vsize_g_0_13
                     __anonstruct_Graph_4_vertices_g_0_13
                     __anonstruct_Edge_3_existent_0_edges_32
                     __anonstruct_Edge_3_to_edges_32
                     __anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 165 13 28#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int f_0)
                     __anonstruct_Graph_4_vsize_g_0_13))
                    /\
                    (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 166 13 28#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int t_0)
                     __anonstruct_Graph_4_vsize_g_0_13))
                    /\
                    (#"graph_c.jc" 301 12 809# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 167 13 36#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_31
                     (shift
                     (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
                     (Int32.to_int f_0)))) (0))))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 168 13 36#
                    "expl:Requires clause"
                    (not
                    ((=)
                    (Int32.to_int
                    (select __anonstruct_Vertex_2_existent_vertices_31
                    (shift
                    (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
                    (Int32.to_int t_0)))) (0))))))))))))))))) }
                  ensures {
                    (#"/home/andrew/astraver/hw3/final/graph.c" 169 12 41#
                    "expl:Ensures clause"
                    ((=) (Int32.to_int result)
                    (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
                    __anonstruct_Graph_4_esize_g_0_13
                    __anonstruct_Graph_4_edges_g_0_13
                    __anonstruct_Edge_3_existent_0_edges_32
                    __anonstruct_Edge_3_to_edges_32
                    __anonstruct_Edge_3_from_edges_32))) }
  
end

module Function_add_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val add_edge
  (g_6 : (pointer __anonstruct_Graph_4)) 
   (f_2 : Int32.t) 
    (t_2 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_14 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_34 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_34 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_33_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_g_14_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_34_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_g_14 : (memory __anonstruct_Graph_4
              Int32.t)) 
              (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4
               (pointer __anonstruct_Edge_3))) 
               (__anonstruct_Graph_4_vsize_g_14 : (memory
                __anonstruct_Graph_4 Int32.t)) 
                (__anonstruct_Graph_4_vertices_g_14 : (memory
                 __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                 (__anonstruct_Vertex_2_existent_vertices_33 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true } reads {
                  __anonstruct_Edge_3_existent_0_edges_34,
                  __anonstruct_Edge_3_from_edges_34,
                  __anonstruct_Edge_3_to_edges_34,
                  __anonstruct_Graph_4_ecnt_g_14 } writes {
                  __anonstruct_Edge_3_existent_0_edges_34,
                  __anonstruct_Edge_3_from_edges_34,
                  __anonstruct_Edge_3_to_edges_34,
                  __anonstruct_Graph_4_ecnt_g_14 }
                  ensures {
                    (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                    "expl:Ensures clause"
                    (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                    "expl:Ensures clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_33_alloc_table
                     __anonstruct_Edge_3_edges_34_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34
                     __anonstruct_Vertex_2_existent_vertices_33))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                    "expl:Ensures clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 209 10 59#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (Int.(+)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14 (old
                     !__anonstruct_Edge_3_existent_0_edges_34) (old
                     !__anonstruct_Edge_3_to_edges_34) (old
                     !__anonstruct_Edge_3_from_edges_34)) (1))))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 210 10 108#
                    "expl:Ensures clause"
                    (forall f2_26 : int.
                     (forall t2_26 : int.
                      (((not ((=) f2_26 (Int32.to_int f_2))) \/
                       (not ((=) t2_26 (Int32.to_int t_2)))) ->
                       ((=)
                       (all_count g_6 f2_26 t2_26
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (all_count g_6 f2_26 t2_26
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14 (old
                       !__anonstruct_Edge_3_existent_0_edges_34) (old
                       !__anonstruct_Edge_3_to_edges_34) (old
                       !__anonstruct_Edge_3_from_edges_34)))))))))))) }
  
end

module Function_add_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_LF__Axiomatic__l_count_empty_tail 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val add_edge
  (g_6 : (pointer __anonstruct_Graph_4)) 
   (f_2 : Int32.t) 
    (t_2 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_14 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_34 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_34 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_34 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_33_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_g_14_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_34_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_34_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_g_14 : (memory __anonstruct_Graph_4
              Int32.t)) 
              (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4
               (pointer __anonstruct_Edge_3))) 
               (__anonstruct_Graph_4_vsize_g_14 : (memory
                __anonstruct_Graph_4 Int32.t)) 
                (__anonstruct_Graph_4_vertices_g_14 : (memory
                 __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                 (__anonstruct_Vertex_2_existent_vertices_33 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"graph_c.jc" 427 12 863# "expl:Requires clause"
                     _LF__Predicate__l_count_empty_tail)
                    /\
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 202 11 20#
                     "expl:Requires clause"
                     (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                     ((#"graph_c.jc" 427 12 863# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6)
                      (0)))
                     /\
                     (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                     ((#"graph_c.jc" 427 12 863# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6)
                      (0)))
                     /\
                     (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 202 24 38#
                     "expl:Requires clause"
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_33_alloc_table
                     __anonstruct_Edge_3_edges_34_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34
                     __anonstruct_Vertex_2_existent_vertices_33))
                    /\
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 203 11 26#
                     "expl:Requires clause"
                     (is_vertex g_6 (Int32.to_int f_2)
                     __anonstruct_Graph_4_vsize_g_14))
                    /\
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 204 11 26#
                     "expl:Requires clause"
                     (is_vertex g_6 (Int32.to_int t_2)
                     __anonstruct_Graph_4_vsize_g_14))
                    /\
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 205 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_33
                     (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
                     (Int32.to_int f_2)))) (0))))
                    /\
                    (#"graph_c.jc" 427 12 863# "expl:Requires clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 206 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_33
                     (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
                     (Int32.to_int t_2)))) (0))))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 207 11 19#
                    "expl:Requires clause"
                    (not
                    (full g_6 __anonstruct_Graph_4_esize_g_14
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_34))))))))))))))))))
                    }
                  reads { __anonstruct_Edge_3_existent_0_edges_34,
                  __anonstruct_Edge_3_from_edges_34,
                  __anonstruct_Edge_3_to_edges_34,
                  __anonstruct_Graph_4_ecnt_g_14 } writes {
                  __anonstruct_Edge_3_existent_0_edges_34,
                  __anonstruct_Edge_3_from_edges_34,
                  __anonstruct_Edge_3_to_edges_34,
                  __anonstruct_Graph_4_ecnt_g_14 }
                  ensures {
                    (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                    "expl:Ensures clause"
                    (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                    "expl:Ensures clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_33_alloc_table
                     __anonstruct_Edge_3_edges_34_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34
                     __anonstruct_Vertex_2_existent_vertices_33))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 208 10 24#
                    "expl:Ensures clause"
                    ((#"/home/andrew/astraver/hw3/final/graph.c" 209 10 59#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_34
                     !__anonstruct_Edge_3_to_edges_34
                     !__anonstruct_Edge_3_from_edges_34)
                     (Int.(+)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14 (old
                     !__anonstruct_Edge_3_existent_0_edges_34) (old
                     !__anonstruct_Edge_3_to_edges_34) (old
                     !__anonstruct_Edge_3_from_edges_34)) (1))))
                    /\
                    (#"/home/andrew/astraver/hw3/final/graph.c" 210 10 108#
                    "expl:Ensures clause"
                    (forall f2_26 : int.
                     (forall t2_26 : int.
                      (((not ((=) f2_26 (Int32.to_int f_2))) \/
                       (not ((=) t2_26 (Int32.to_int t_2)))) ->
                       ((=)
                       (all_count g_6 f2_26 t2_26
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_34
                       !__anonstruct_Edge_3_to_edges_34
                       !__anonstruct_Edge_3_from_edges_34)
                       (all_count g_6 f2_26 t2_26
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14 (old
                       !__anonstruct_Edge_3_existent_0_edges_34) (old
                       !__anonstruct_Edge_3_to_edges_34) (old
                       !__anonstruct_Edge_3_from_edges_34)))))))))))) }
  
end
